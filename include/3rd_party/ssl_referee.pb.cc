// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_referee.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ssl_referee.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Referee_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Referee_reflection_ = NULL;
const ::google::protobuf::Descriptor* Referee_TeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Referee_TeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Referee_Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Referee_Point_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Referee_Stage_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Referee_Command_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProposedGameEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProposedGameEvent_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ssl_5freferee_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ssl_5freferee_2eproto() {
  protobuf_AddDesc_ssl_5freferee_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ssl_referee.proto");
  GOOGLE_CHECK(file != NULL);
  Referee_descriptor_ = file->message_type(0);
  static const int Referee_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, packet_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, stage_time_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, command_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, command_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, yellow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, designated_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, blue_team_on_positive_half_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, game_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, next_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, game_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, proposed_game_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, current_action_time_remaining_),
  };
  Referee_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Referee_descriptor_,
      Referee::default_instance_,
      Referee_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, _has_bits_[0]),
      -1,
      -1,
      sizeof(Referee),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee, _internal_metadata_),
      -1);
  Referee_TeamInfo_descriptor_ = Referee_descriptor_->nested_type(0);
  static const int Referee_TeamInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee_TeamInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee_TeamInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee_TeamInfo, red_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee_TeamInfo, yellow_card_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee_TeamInfo, yellow_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee_TeamInfo, timeouts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee_TeamInfo, timeout_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee_TeamInfo, goalkeeper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee_TeamInfo, foul_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee_TeamInfo, ball_placement_failures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee_TeamInfo, can_place_ball_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee_TeamInfo, max_allowed_bots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee_TeamInfo, bot_substitution_intent_),
  };
  Referee_TeamInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Referee_TeamInfo_descriptor_,
      Referee_TeamInfo::default_instance_,
      Referee_TeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee_TeamInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(Referee_TeamInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee_TeamInfo, _internal_metadata_),
      -1);
  Referee_Point_descriptor_ = Referee_descriptor_->nested_type(1);
  static const int Referee_Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee_Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee_Point, y_),
  };
  Referee_Point_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Referee_Point_descriptor_,
      Referee_Point::default_instance_,
      Referee_Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee_Point, _has_bits_[0]),
      -1,
      -1,
      sizeof(Referee_Point),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Referee_Point, _internal_metadata_),
      -1);
  Referee_Stage_descriptor_ = Referee_descriptor_->enum_type(0);
  Referee_Command_descriptor_ = Referee_descriptor_->enum_type(1);
  ProposedGameEvent_descriptor_ = file->message_type(1);
  static const int ProposedGameEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposedGameEvent, valid_until_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposedGameEvent, proposer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposedGameEvent, game_event_),
  };
  ProposedGameEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProposedGameEvent_descriptor_,
      ProposedGameEvent::default_instance_,
      ProposedGameEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposedGameEvent, _has_bits_[0]),
      -1,
      -1,
      sizeof(ProposedGameEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposedGameEvent, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ssl_5freferee_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Referee_descriptor_, &Referee::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Referee_TeamInfo_descriptor_, &Referee_TeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Referee_Point_descriptor_, &Referee_Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProposedGameEvent_descriptor_, &ProposedGameEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ssl_5freferee_2eproto() {
  delete Referee::default_instance_;
  delete Referee_reflection_;
  delete Referee_TeamInfo::default_instance_;
  delete Referee_TeamInfo_reflection_;
  delete Referee_Point::default_instance_;
  delete Referee_Point_reflection_;
  delete ProposedGameEvent::default_instance_;
  delete ProposedGameEvent_reflection_;
}

void protobuf_AddDesc_ssl_5freferee_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ssl_5freferee_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_ssl_5fgame_5fevent_2eproto();
  ::protobuf_AddDesc_ssl_5fgame_5fevent_5f2019_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ssl_referee.proto\032\024ssl_game_event.prot"
    "o\032\031ssl_game_event_2019.proto\"\312\014\n\007Referee"
    "\022\030\n\020packet_timestamp\030\001 \002(\004\022\035\n\005stage\030\002 \002("
    "\0162\016.Referee.Stage\022\027\n\017stage_time_left\030\003 \001"
    "(\021\022!\n\007command\030\004 \002(\0162\020.Referee.Command\022\027\n"
    "\017command_counter\030\005 \002(\r\022\031\n\021command_timest"
    "amp\030\006 \002(\004\022!\n\006yellow\030\007 \002(\0132\021.Referee.Team"
    "Info\022\037\n\004blue\030\010 \002(\0132\021.Referee.TeamInfo\022+\n"
    "\023designated_position\030\t \001(\0132\016.Referee.Poi"
    "nt\022\"\n\032blue_team_on_positive_half\030\n \001(\010\022#"
    "\n\ngame_event\030\013 \001(\0132\013.Game_EventB\002\030\001\022&\n\014n"
    "ext_command\030\014 \001(\0162\020.Referee.Command\022\037\n\013g"
    "ame_events\030\r \003(\0132\n.GameEvent\0220\n\024proposed"
    "_game_events\030\016 \003(\0132\022.ProposedGameEvent\022%"
    "\n\035current_action_time_remaining\030\017 \001(\005\032\265\002"
    "\n\010TeamInfo\022\014\n\004name\030\001 \002(\t\022\r\n\005score\030\002 \002(\r\022"
    "\021\n\tred_cards\030\003 \002(\r\022\035\n\021yellow_card_times\030"
    "\004 \003(\rB\002\020\001\022\024\n\014yellow_cards\030\005 \002(\r\022\020\n\010timeo"
    "uts\030\006 \002(\r\022\024\n\014timeout_time\030\007 \002(\r\022\022\n\ngoalk"
    "eeper\030\010 \002(\r\022\024\n\014foul_counter\030\t \001(\r\022\037\n\027bal"
    "l_placement_failures\030\n \001(\r\022\026\n\016can_place_"
    "ball\030\014 \001(\010\022\030\n\020max_allowed_bots\030\r \001(\r\022\037\n\027"
    "bot_substitution_intent\030\016 \001(\010\032\035\n\005Point\022\t"
    "\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"\321\002\n\005Stage\022\031\n\025NORMAL"
    "_FIRST_HALF_PRE\020\000\022\025\n\021NORMAL_FIRST_HALF\020\001"
    "\022\024\n\020NORMAL_HALF_TIME\020\002\022\032\n\026NORMAL_SECOND_"
    "HALF_PRE\020\003\022\026\n\022NORMAL_SECOND_HALF\020\004\022\024\n\020EX"
    "TRA_TIME_BREAK\020\005\022\030\n\024EXTRA_FIRST_HALF_PRE"
    "\020\006\022\024\n\020EXTRA_FIRST_HALF\020\007\022\023\n\017EXTRA_HALF_T"
    "IME\020\010\022\031\n\025EXTRA_SECOND_HALF_PRE\020\t\022\025\n\021EXTR"
    "A_SECOND_HALF\020\n\022\032\n\026PENALTY_SHOOTOUT_BREA"
    "K\020\013\022\024\n\020PENALTY_SHOOTOUT\020\014\022\r\n\tPOST_GAME\020\r"
    "\"\216\003\n\007Command\022\010\n\004HALT\020\000\022\010\n\004STOP\020\001\022\020\n\014NORM"
    "AL_START\020\002\022\017\n\013FORCE_START\020\003\022\032\n\026PREPARE_K"
    "ICKOFF_YELLOW\020\004\022\030\n\024PREPARE_KICKOFF_BLUE\020"
    "\005\022\032\n\026PREPARE_PENALTY_YELLOW\020\006\022\030\n\024PREPARE"
    "_PENALTY_BLUE\020\007\022\026\n\022DIRECT_FREE_YELLOW\020\010\022"
    "\024\n\020DIRECT_FREE_BLUE\020\t\022\030\n\024INDIRECT_FREE_Y"
    "ELLOW\020\n\022\026\n\022INDIRECT_FREE_BLUE\020\013\022\022\n\016TIMEO"
    "UT_YELLOW\020\014\022\020\n\014TIMEOUT_BLUE\020\r\022\023\n\013GOAL_YE"
    "LLOW\020\016\032\002\010\001\022\021\n\tGOAL_BLUE\020\017\032\002\010\001\022\031\n\025BALL_PL"
    "ACEMENT_YELLOW\020\020\022\027\n\023BALL_PLACEMENT_BLUE\020"
    "\021\"]\n\021ProposedGameEvent\022\023\n\013valid_until\030\001 "
    "\002(\004\022\023\n\013proposer_id\030\002 \002(\t\022\036\n\ngame_event\030\003"
    " \002(\0132\n.GameEvent", 1776);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssl_referee.proto", &protobuf_RegisterTypes);
  Referee::default_instance_ = new Referee();
  Referee_TeamInfo::default_instance_ = new Referee_TeamInfo();
  Referee_Point::default_instance_ = new Referee_Point();
  ProposedGameEvent::default_instance_ = new ProposedGameEvent();
  Referee::default_instance_->InitAsDefaultInstance();
  Referee_TeamInfo::default_instance_->InitAsDefaultInstance();
  Referee_Point::default_instance_->InitAsDefaultInstance();
  ProposedGameEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ssl_5freferee_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ssl_5freferee_2eproto {
  StaticDescriptorInitializer_ssl_5freferee_2eproto() {
    protobuf_AddDesc_ssl_5freferee_2eproto();
  }
} static_descriptor_initializer_ssl_5freferee_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Referee_Stage_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Referee_Stage_descriptor_;
}
bool Referee_Stage_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Referee_Stage Referee::NORMAL_FIRST_HALF_PRE;
const Referee_Stage Referee::NORMAL_FIRST_HALF;
const Referee_Stage Referee::NORMAL_HALF_TIME;
const Referee_Stage Referee::NORMAL_SECOND_HALF_PRE;
const Referee_Stage Referee::NORMAL_SECOND_HALF;
const Referee_Stage Referee::EXTRA_TIME_BREAK;
const Referee_Stage Referee::EXTRA_FIRST_HALF_PRE;
const Referee_Stage Referee::EXTRA_FIRST_HALF;
const Referee_Stage Referee::EXTRA_HALF_TIME;
const Referee_Stage Referee::EXTRA_SECOND_HALF_PRE;
const Referee_Stage Referee::EXTRA_SECOND_HALF;
const Referee_Stage Referee::PENALTY_SHOOTOUT_BREAK;
const Referee_Stage Referee::PENALTY_SHOOTOUT;
const Referee_Stage Referee::POST_GAME;
const Referee_Stage Referee::Stage_MIN;
const Referee_Stage Referee::Stage_MAX;
const int Referee::Stage_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Referee_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Referee_Command_descriptor_;
}
bool Referee_Command_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Referee_Command Referee::HALT;
const Referee_Command Referee::STOP;
const Referee_Command Referee::NORMAL_START;
const Referee_Command Referee::FORCE_START;
const Referee_Command Referee::PREPARE_KICKOFF_YELLOW;
const Referee_Command Referee::PREPARE_KICKOFF_BLUE;
const Referee_Command Referee::PREPARE_PENALTY_YELLOW;
const Referee_Command Referee::PREPARE_PENALTY_BLUE;
const Referee_Command Referee::DIRECT_FREE_YELLOW;
const Referee_Command Referee::DIRECT_FREE_BLUE;
const Referee_Command Referee::INDIRECT_FREE_YELLOW;
const Referee_Command Referee::INDIRECT_FREE_BLUE;
const Referee_Command Referee::TIMEOUT_YELLOW;
const Referee_Command Referee::TIMEOUT_BLUE;
const Referee_Command Referee::GOAL_YELLOW;
const Referee_Command Referee::GOAL_BLUE;
const Referee_Command Referee::BALL_PLACEMENT_YELLOW;
const Referee_Command Referee::BALL_PLACEMENT_BLUE;
const Referee_Command Referee::Command_MIN;
const Referee_Command Referee::Command_MAX;
const int Referee::Command_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Referee_TeamInfo::kNameFieldNumber;
const int Referee_TeamInfo::kScoreFieldNumber;
const int Referee_TeamInfo::kRedCardsFieldNumber;
const int Referee_TeamInfo::kYellowCardTimesFieldNumber;
const int Referee_TeamInfo::kYellowCardsFieldNumber;
const int Referee_TeamInfo::kTimeoutsFieldNumber;
const int Referee_TeamInfo::kTimeoutTimeFieldNumber;
const int Referee_TeamInfo::kGoalkeeperFieldNumber;
const int Referee_TeamInfo::kFoulCounterFieldNumber;
const int Referee_TeamInfo::kBallPlacementFailuresFieldNumber;
const int Referee_TeamInfo::kCanPlaceBallFieldNumber;
const int Referee_TeamInfo::kMaxAllowedBotsFieldNumber;
const int Referee_TeamInfo::kBotSubstitutionIntentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Referee_TeamInfo::Referee_TeamInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Referee.TeamInfo)
}

void Referee_TeamInfo::InitAsDefaultInstance() {
}

Referee_TeamInfo::Referee_TeamInfo(const Referee_TeamInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Referee.TeamInfo)
}

void Referee_TeamInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0u;
  red_cards_ = 0u;
  yellow_cards_ = 0u;
  timeouts_ = 0u;
  timeout_time_ = 0u;
  goalkeeper_ = 0u;
  foul_counter_ = 0u;
  ball_placement_failures_ = 0u;
  can_place_ball_ = false;
  max_allowed_bots_ = 0u;
  bot_substitution_intent_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Referee_TeamInfo::~Referee_TeamInfo() {
  // @@protoc_insertion_point(destructor:Referee.TeamInfo)
  SharedDtor();
}

void Referee_TeamInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Referee_TeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Referee_TeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Referee_TeamInfo_descriptor_;
}

const Referee_TeamInfo& Referee_TeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5freferee_2eproto();
  return *default_instance_;
}

Referee_TeamInfo* Referee_TeamInfo::default_instance_ = NULL;

Referee_TeamInfo* Referee_TeamInfo::New(::google::protobuf::Arena* arena) const {
  Referee_TeamInfo* n = new Referee_TeamInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Referee_TeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Referee.TeamInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Referee_TeamInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Referee_TeamInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 247u) {
    ZR_(score_, red_cards_);
    ZR_(yellow_cards_, goalkeeper_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ZR_(foul_counter_, bot_substitution_intent_);
  }

#undef ZR_HELPER_
#undef ZR_

  yellow_card_times_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Referee_TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Referee.TeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Referee.TeamInfo.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // required uint32 score = 2;
      case 2: {
        if (tag == 16) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_red_cards;
        break;
      }

      // required uint32 red_cards = 3;
      case 3: {
        if (tag == 24) {
         parse_red_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_cards_)));
          set_has_red_cards();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_yellow_card_times;
        break;
      }

      // repeated uint32 yellow_card_times = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_yellow_card_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_yellow_card_times())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_yellow_card_times())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_yellow_cards;
        break;
      }

      // required uint32 yellow_cards = 5;
      case 5: {
        if (tag == 40) {
         parse_yellow_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yellow_cards_)));
          set_has_yellow_cards();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_timeouts;
        break;
      }

      // required uint32 timeouts = 6;
      case 6: {
        if (tag == 48) {
         parse_timeouts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeouts_)));
          set_has_timeouts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_timeout_time;
        break;
      }

      // required uint32 timeout_time = 7;
      case 7: {
        if (tag == 56) {
         parse_timeout_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_time_)));
          set_has_timeout_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_goalkeeper;
        break;
      }

      // required uint32 goalkeeper = 8;
      case 8: {
        if (tag == 64) {
         parse_goalkeeper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goalkeeper_)));
          set_has_goalkeeper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_foul_counter;
        break;
      }

      // optional uint32 foul_counter = 9;
      case 9: {
        if (tag == 72) {
         parse_foul_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &foul_counter_)));
          set_has_foul_counter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ball_placement_failures;
        break;
      }

      // optional uint32 ball_placement_failures = 10;
      case 10: {
        if (tag == 80) {
         parse_ball_placement_failures:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ball_placement_failures_)));
          set_has_ball_placement_failures();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_can_place_ball;
        break;
      }

      // optional bool can_place_ball = 12;
      case 12: {
        if (tag == 96) {
         parse_can_place_ball:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_place_ball_)));
          set_has_can_place_ball();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_max_allowed_bots;
        break;
      }

      // optional uint32 max_allowed_bots = 13;
      case 13: {
        if (tag == 104) {
         parse_max_allowed_bots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_allowed_bots_)));
          set_has_max_allowed_bots();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_bot_substitution_intent;
        break;
      }

      // optional bool bot_substitution_intent = 14;
      case 14: {
        if (tag == 112) {
         parse_bot_substitution_intent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bot_substitution_intent_)));
          set_has_bot_substitution_intent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Referee.TeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Referee.TeamInfo)
  return false;
#undef DO_
}

void Referee_TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Referee.TeamInfo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Referee.TeamInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // required uint32 red_cards = 3;
  if (has_red_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->red_cards(), output);
  }

  // repeated uint32 yellow_card_times = 4 [packed = true];
  if (this->yellow_card_times_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_yellow_card_times_cached_byte_size_);
  }
  for (int i = 0; i < this->yellow_card_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->yellow_card_times(i), output);
  }

  // required uint32 yellow_cards = 5;
  if (has_yellow_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->yellow_cards(), output);
  }

  // required uint32 timeouts = 6;
  if (has_timeouts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->timeouts(), output);
  }

  // required uint32 timeout_time = 7;
  if (has_timeout_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->timeout_time(), output);
  }

  // required uint32 goalkeeper = 8;
  if (has_goalkeeper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->goalkeeper(), output);
  }

  // optional uint32 foul_counter = 9;
  if (has_foul_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->foul_counter(), output);
  }

  // optional uint32 ball_placement_failures = 10;
  if (has_ball_placement_failures()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->ball_placement_failures(), output);
  }

  // optional bool can_place_ball = 12;
  if (has_can_place_ball()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->can_place_ball(), output);
  }

  // optional uint32 max_allowed_bots = 13;
  if (has_max_allowed_bots()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->max_allowed_bots(), output);
  }

  // optional bool bot_substitution_intent = 14;
  if (has_bot_substitution_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->bot_substitution_intent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Referee.TeamInfo)
}

::google::protobuf::uint8* Referee_TeamInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Referee.TeamInfo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Referee.TeamInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // required uint32 red_cards = 3;
  if (has_red_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->red_cards(), target);
  }

  // repeated uint32 yellow_card_times = 4 [packed = true];
  if (this->yellow_card_times_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _yellow_card_times_cached_byte_size_, target);
  }
  for (int i = 0; i < this->yellow_card_times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->yellow_card_times(i), target);
  }

  // required uint32 yellow_cards = 5;
  if (has_yellow_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->yellow_cards(), target);
  }

  // required uint32 timeouts = 6;
  if (has_timeouts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->timeouts(), target);
  }

  // required uint32 timeout_time = 7;
  if (has_timeout_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->timeout_time(), target);
  }

  // required uint32 goalkeeper = 8;
  if (has_goalkeeper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->goalkeeper(), target);
  }

  // optional uint32 foul_counter = 9;
  if (has_foul_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->foul_counter(), target);
  }

  // optional uint32 ball_placement_failures = 10;
  if (has_ball_placement_failures()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->ball_placement_failures(), target);
  }

  // optional bool can_place_ball = 12;
  if (has_can_place_ball()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->can_place_ball(), target);
  }

  // optional uint32 max_allowed_bots = 13;
  if (has_max_allowed_bots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->max_allowed_bots(), target);
  }

  // optional bool bot_substitution_intent = 14;
  if (has_bot_substitution_intent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->bot_substitution_intent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Referee.TeamInfo)
  return target;
}

int Referee_TeamInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Referee.TeamInfo)
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_score()) {
    // required uint32 score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  if (has_red_cards()) {
    // required uint32 red_cards = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->red_cards());
  }

  if (has_yellow_cards()) {
    // required uint32 yellow_cards = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->yellow_cards());
  }

  if (has_timeouts()) {
    // required uint32 timeouts = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeouts());
  }

  if (has_timeout_time()) {
    // required uint32 timeout_time = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout_time());
  }

  if (has_goalkeeper()) {
    // required uint32 goalkeeper = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->goalkeeper());
  }

  return total_size;
}
int Referee_TeamInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Referee.TeamInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000000f7) ^ 0x000000f7) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint32 score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());

    // required uint32 red_cards = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->red_cards());

    // required uint32 yellow_cards = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->yellow_cards());

    // required uint32 timeouts = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeouts());

    // required uint32 timeout_time = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout_time());

    // required uint32 goalkeeper = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->goalkeeper());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional uint32 foul_counter = 9;
    if (has_foul_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->foul_counter());
    }

    // optional uint32 ball_placement_failures = 10;
    if (has_ball_placement_failures()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ball_placement_failures());
    }

    // optional bool can_place_ball = 12;
    if (has_can_place_ball()) {
      total_size += 1 + 1;
    }

    // optional uint32 max_allowed_bots = 13;
    if (has_max_allowed_bots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_allowed_bots());
    }

    // optional bool bot_substitution_intent = 14;
    if (has_bot_substitution_intent()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 yellow_card_times = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->yellow_card_times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->yellow_card_times(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _yellow_card_times_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Referee_TeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Referee.TeamInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Referee_TeamInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Referee_TeamInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Referee.TeamInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Referee.TeamInfo)
    MergeFrom(*source);
  }
}

void Referee_TeamInfo::MergeFrom(const Referee_TeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Referee.TeamInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  yellow_card_times_.MergeFrom(from.yellow_card_times_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_red_cards()) {
      set_red_cards(from.red_cards());
    }
    if (from.has_yellow_cards()) {
      set_yellow_cards(from.yellow_cards());
    }
    if (from.has_timeouts()) {
      set_timeouts(from.timeouts());
    }
    if (from.has_timeout_time()) {
      set_timeout_time(from.timeout_time());
    }
    if (from.has_goalkeeper()) {
      set_goalkeeper(from.goalkeeper());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_foul_counter()) {
      set_foul_counter(from.foul_counter());
    }
    if (from.has_ball_placement_failures()) {
      set_ball_placement_failures(from.ball_placement_failures());
    }
    if (from.has_can_place_ball()) {
      set_can_place_ball(from.can_place_ball());
    }
    if (from.has_max_allowed_bots()) {
      set_max_allowed_bots(from.max_allowed_bots());
    }
    if (from.has_bot_substitution_intent()) {
      set_bot_substitution_intent(from.bot_substitution_intent());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Referee_TeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Referee.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Referee_TeamInfo::CopyFrom(const Referee_TeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Referee.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Referee_TeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000f7) != 0x000000f7) return false;

  return true;
}

void Referee_TeamInfo::Swap(Referee_TeamInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Referee_TeamInfo::InternalSwap(Referee_TeamInfo* other) {
  name_.Swap(&other->name_);
  std::swap(score_, other->score_);
  std::swap(red_cards_, other->red_cards_);
  yellow_card_times_.UnsafeArenaSwap(&other->yellow_card_times_);
  std::swap(yellow_cards_, other->yellow_cards_);
  std::swap(timeouts_, other->timeouts_);
  std::swap(timeout_time_, other->timeout_time_);
  std::swap(goalkeeper_, other->goalkeeper_);
  std::swap(foul_counter_, other->foul_counter_);
  std::swap(ball_placement_failures_, other->ball_placement_failures_);
  std::swap(can_place_ball_, other->can_place_ball_);
  std::swap(max_allowed_bots_, other->max_allowed_bots_);
  std::swap(bot_substitution_intent_, other->bot_substitution_intent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Referee_TeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Referee_TeamInfo_descriptor_;
  metadata.reflection = Referee_TeamInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Referee_Point::kXFieldNumber;
const int Referee_Point::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Referee_Point::Referee_Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Referee.Point)
}

void Referee_Point::InitAsDefaultInstance() {
}

Referee_Point::Referee_Point(const Referee_Point& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Referee.Point)
}

void Referee_Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Referee_Point::~Referee_Point() {
  // @@protoc_insertion_point(destructor:Referee.Point)
  SharedDtor();
}

void Referee_Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Referee_Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Referee_Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Referee_Point_descriptor_;
}

const Referee_Point& Referee_Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5freferee_2eproto();
  return *default_instance_;
}

Referee_Point* Referee_Point::default_instance_ = NULL;

Referee_Point* Referee_Point::New(::google::protobuf::Arena* arena) const {
  Referee_Point* n = new Referee_Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Referee_Point::Clear() {
// @@protoc_insertion_point(message_clear_start:Referee.Point)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Referee_Point, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Referee_Point*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Referee_Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Referee.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Referee.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Referee.Point)
  return false;
#undef DO_
}

void Referee_Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Referee.Point)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Referee.Point)
}

::google::protobuf::uint8* Referee_Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Referee.Point)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Referee.Point)
  return target;
}

int Referee_Point::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Referee.Point)
  int total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
int Referee_Point::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Referee.Point)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Referee_Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Referee.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Referee_Point* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Referee_Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Referee.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Referee.Point)
    MergeFrom(*source);
  }
}

void Referee_Point::MergeFrom(const Referee_Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Referee.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Referee_Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Referee.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Referee_Point::CopyFrom(const Referee_Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Referee.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Referee_Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Referee_Point::Swap(Referee_Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Referee_Point::InternalSwap(Referee_Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Referee_Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Referee_Point_descriptor_;
  metadata.reflection = Referee_Point_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Referee::kPacketTimestampFieldNumber;
const int Referee::kStageFieldNumber;
const int Referee::kStageTimeLeftFieldNumber;
const int Referee::kCommandFieldNumber;
const int Referee::kCommandCounterFieldNumber;
const int Referee::kCommandTimestampFieldNumber;
const int Referee::kYellowFieldNumber;
const int Referee::kBlueFieldNumber;
const int Referee::kDesignatedPositionFieldNumber;
const int Referee::kBlueTeamOnPositiveHalfFieldNumber;
const int Referee::kGameEventFieldNumber;
const int Referee::kNextCommandFieldNumber;
const int Referee::kGameEventsFieldNumber;
const int Referee::kProposedGameEventsFieldNumber;
const int Referee::kCurrentActionTimeRemainingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Referee::Referee()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Referee)
}

void Referee::InitAsDefaultInstance() {
  yellow_ = const_cast< ::Referee_TeamInfo*>(&::Referee_TeamInfo::default_instance());
  blue_ = const_cast< ::Referee_TeamInfo*>(&::Referee_TeamInfo::default_instance());
  designated_position_ = const_cast< ::Referee_Point*>(&::Referee_Point::default_instance());
  game_event_ = const_cast< ::Game_Event*>(&::Game_Event::default_instance());
}

Referee::Referee(const Referee& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Referee)
}

void Referee::SharedCtor() {
  _cached_size_ = 0;
  packet_timestamp_ = GOOGLE_ULONGLONG(0);
  stage_ = 0;
  stage_time_left_ = 0;
  command_ = 0;
  command_counter_ = 0u;
  command_timestamp_ = GOOGLE_ULONGLONG(0);
  yellow_ = NULL;
  blue_ = NULL;
  designated_position_ = NULL;
  blue_team_on_positive_half_ = false;
  game_event_ = NULL;
  next_command_ = 0;
  current_action_time_remaining_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Referee::~Referee() {
  // @@protoc_insertion_point(destructor:Referee)
  SharedDtor();
}

void Referee::SharedDtor() {
  if (this != default_instance_) {
    delete yellow_;
    delete blue_;
    delete designated_position_;
    delete game_event_;
  }
}

void Referee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Referee::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Referee_descriptor_;
}

const Referee& Referee::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5freferee_2eproto();
  return *default_instance_;
}

Referee* Referee::default_instance_ = NULL;

Referee* Referee::New(::google::protobuf::Arena* arena) const {
  Referee* n = new Referee;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Referee::Clear() {
// @@protoc_insertion_point(message_clear_start:Referee)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Referee, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Referee*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(packet_timestamp_, command_timestamp_);
    if (has_yellow()) {
      if (yellow_ != NULL) yellow_->::Referee_TeamInfo::Clear();
    }
    if (has_blue()) {
      if (blue_ != NULL) blue_->::Referee_TeamInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 20224u) {
    ZR_(blue_team_on_positive_half_, next_command_);
    if (has_designated_position()) {
      if (designated_position_ != NULL) designated_position_->::Referee_Point::Clear();
    }
    if (has_game_event()) {
      if (game_event_ != NULL) game_event_->::Game_Event::Clear();
    }
    current_action_time_remaining_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  game_events_.Clear();
  proposed_game_events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Referee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Referee)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 packet_timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packet_timestamp_)));
          set_has_packet_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stage;
        break;
      }

      // required .Referee.Stage stage = 2;
      case 2: {
        if (tag == 16) {
         parse_stage:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Referee_Stage_IsValid(value)) {
            set_stage(static_cast< ::Referee_Stage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stage_time_left;
        break;
      }

      // optional sint32 stage_time_left = 3;
      case 3: {
        if (tag == 24) {
         parse_stage_time_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &stage_time_left_)));
          set_has_stage_time_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_command;
        break;
      }

      // required .Referee.Command command = 4;
      case 4: {
        if (tag == 32) {
         parse_command:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Referee_Command_IsValid(value)) {
            set_command(static_cast< ::Referee_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_command_counter;
        break;
      }

      // required uint32 command_counter = 5;
      case 5: {
        if (tag == 40) {
         parse_command_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &command_counter_)));
          set_has_command_counter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_command_timestamp;
        break;
      }

      // required uint64 command_timestamp = 6;
      case 6: {
        if (tag == 48) {
         parse_command_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &command_timestamp_)));
          set_has_command_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_yellow;
        break;
      }

      // required .Referee.TeamInfo yellow = 7;
      case 7: {
        if (tag == 58) {
         parse_yellow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yellow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_blue;
        break;
      }

      // required .Referee.TeamInfo blue = 8;
      case 8: {
        if (tag == 66) {
         parse_blue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_designated_position;
        break;
      }

      // optional .Referee.Point designated_position = 9;
      case 9: {
        if (tag == 74) {
         parse_designated_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_designated_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_blue_team_on_positive_half;
        break;
      }

      // optional bool blue_team_on_positive_half = 10;
      case 10: {
        if (tag == 80) {
         parse_blue_team_on_positive_half:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blue_team_on_positive_half_)));
          set_has_blue_team_on_positive_half();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_game_event;
        break;
      }

      // optional .Game_Event game_event = 11 [deprecated = true];
      case 11: {
        if (tag == 90) {
         parse_game_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_next_command;
        break;
      }

      // optional .Referee.Command next_command = 12;
      case 12: {
        if (tag == 96) {
         parse_next_command:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Referee_Command_IsValid(value)) {
            set_next_command(static_cast< ::Referee_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_game_events;
        break;
      }

      // repeated .GameEvent game_events = 13;
      case 13: {
        if (tag == 106) {
         parse_game_events:
          DO_(input->IncrementRecursionDepth());
         parse_loop_game_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_game_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_game_events;
        if (input->ExpectTag(114)) goto parse_loop_proposed_game_events;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .ProposedGameEvent proposed_game_events = 14;
      case 14: {
        if (tag == 114) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_proposed_game_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_proposed_game_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_proposed_game_events;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(120)) goto parse_current_action_time_remaining;
        break;
      }

      // optional int32 current_action_time_remaining = 15;
      case 15: {
        if (tag == 120) {
         parse_current_action_time_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_action_time_remaining_)));
          set_has_current_action_time_remaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Referee)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Referee)
  return false;
#undef DO_
}

void Referee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Referee)
  // required uint64 packet_timestamp = 1;
  if (has_packet_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->packet_timestamp(), output);
  }

  // required .Referee.Stage stage = 2;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->stage(), output);
  }

  // optional sint32 stage_time_left = 3;
  if (has_stage_time_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->stage_time_left(), output);
  }

  // required .Referee.Command command = 4;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->command(), output);
  }

  // required uint32 command_counter = 5;
  if (has_command_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->command_counter(), output);
  }

  // required uint64 command_timestamp = 6;
  if (has_command_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->command_timestamp(), output);
  }

  // required .Referee.TeamInfo yellow = 7;
  if (has_yellow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->yellow_, output);
  }

  // required .Referee.TeamInfo blue = 8;
  if (has_blue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->blue_, output);
  }

  // optional .Referee.Point designated_position = 9;
  if (has_designated_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->designated_position_, output);
  }

  // optional bool blue_team_on_positive_half = 10;
  if (has_blue_team_on_positive_half()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->blue_team_on_positive_half(), output);
  }

  // optional .Game_Event game_event = 11 [deprecated = true];
  if (has_game_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->game_event_, output);
  }

  // optional .Referee.Command next_command = 12;
  if (has_next_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->next_command(), output);
  }

  // repeated .GameEvent game_events = 13;
  for (unsigned int i = 0, n = this->game_events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->game_events(i), output);
  }

  // repeated .ProposedGameEvent proposed_game_events = 14;
  for (unsigned int i = 0, n = this->proposed_game_events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->proposed_game_events(i), output);
  }

  // optional int32 current_action_time_remaining = 15;
  if (has_current_action_time_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->current_action_time_remaining(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Referee)
}

::google::protobuf::uint8* Referee::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Referee)
  // required uint64 packet_timestamp = 1;
  if (has_packet_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->packet_timestamp(), target);
  }

  // required .Referee.Stage stage = 2;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->stage(), target);
  }

  // optional sint32 stage_time_left = 3;
  if (has_stage_time_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->stage_time_left(), target);
  }

  // required .Referee.Command command = 4;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->command(), target);
  }

  // required uint32 command_counter = 5;
  if (has_command_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->command_counter(), target);
  }

  // required uint64 command_timestamp = 6;
  if (has_command_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->command_timestamp(), target);
  }

  // required .Referee.TeamInfo yellow = 7;
  if (has_yellow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->yellow_, false, target);
  }

  // required .Referee.TeamInfo blue = 8;
  if (has_blue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->blue_, false, target);
  }

  // optional .Referee.Point designated_position = 9;
  if (has_designated_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->designated_position_, false, target);
  }

  // optional bool blue_team_on_positive_half = 10;
  if (has_blue_team_on_positive_half()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->blue_team_on_positive_half(), target);
  }

  // optional .Game_Event game_event = 11 [deprecated = true];
  if (has_game_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->game_event_, false, target);
  }

  // optional .Referee.Command next_command = 12;
  if (has_next_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->next_command(), target);
  }

  // repeated .GameEvent game_events = 13;
  for (unsigned int i = 0, n = this->game_events_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->game_events(i), false, target);
  }

  // repeated .ProposedGameEvent proposed_game_events = 14;
  for (unsigned int i = 0, n = this->proposed_game_events_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->proposed_game_events(i), false, target);
  }

  // optional int32 current_action_time_remaining = 15;
  if (has_current_action_time_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->current_action_time_remaining(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Referee)
  return target;
}

int Referee::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Referee)
  int total_size = 0;

  if (has_packet_timestamp()) {
    // required uint64 packet_timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->packet_timestamp());
  }

  if (has_stage()) {
    // required .Referee.Stage stage = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());
  }

  if (has_command()) {
    // required .Referee.Command command = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
  }

  if (has_command_counter()) {
    // required uint32 command_counter = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->command_counter());
  }

  if (has_command_timestamp()) {
    // required uint64 command_timestamp = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->command_timestamp());
  }

  if (has_yellow()) {
    // required .Referee.TeamInfo yellow = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->yellow_);
  }

  if (has_blue()) {
    // required .Referee.TeamInfo blue = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->blue_);
  }

  return total_size;
}
int Referee::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Referee)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000000fb) ^ 0x000000fb) == 0) {  // All required fields are present.
    // required uint64 packet_timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->packet_timestamp());

    // required .Referee.Stage stage = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());

    // required .Referee.Command command = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());

    // required uint32 command_counter = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->command_counter());

    // required uint64 command_timestamp = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->command_timestamp());

    // required .Referee.TeamInfo yellow = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->yellow_);

    // required .Referee.TeamInfo blue = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->blue_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional sint32 stage_time_left = 3;
  if (has_stage_time_left()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->stage_time_left());
  }

  if (_has_bits_[8 / 32] & 20224u) {
    // optional .Referee.Point designated_position = 9;
    if (has_designated_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->designated_position_);
    }

    // optional bool blue_team_on_positive_half = 10;
    if (has_blue_team_on_positive_half()) {
      total_size += 1 + 1;
    }

    // optional .Game_Event game_event = 11 [deprecated = true];
    if (has_game_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->game_event_);
    }

    // optional .Referee.Command next_command = 12;
    if (has_next_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->next_command());
    }

    // optional int32 current_action_time_remaining = 15;
    if (has_current_action_time_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_action_time_remaining());
    }

  }
  // repeated .GameEvent game_events = 13;
  total_size += 1 * this->game_events_size();
  for (int i = 0; i < this->game_events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->game_events(i));
  }

  // repeated .ProposedGameEvent proposed_game_events = 14;
  total_size += 1 * this->proposed_game_events_size();
  for (int i = 0; i < this->proposed_game_events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proposed_game_events(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Referee::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Referee)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Referee* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Referee>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Referee)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Referee)
    MergeFrom(*source);
  }
}

void Referee::MergeFrom(const Referee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Referee)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  game_events_.MergeFrom(from.game_events_);
  proposed_game_events_.MergeFrom(from.proposed_game_events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_timestamp()) {
      set_packet_timestamp(from.packet_timestamp());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_stage_time_left()) {
      set_stage_time_left(from.stage_time_left());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_command_counter()) {
      set_command_counter(from.command_counter());
    }
    if (from.has_command_timestamp()) {
      set_command_timestamp(from.command_timestamp());
    }
    if (from.has_yellow()) {
      mutable_yellow()->::Referee_TeamInfo::MergeFrom(from.yellow());
    }
    if (from.has_blue()) {
      mutable_blue()->::Referee_TeamInfo::MergeFrom(from.blue());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_designated_position()) {
      mutable_designated_position()->::Referee_Point::MergeFrom(from.designated_position());
    }
    if (from.has_blue_team_on_positive_half()) {
      set_blue_team_on_positive_half(from.blue_team_on_positive_half());
    }
    if (from.has_game_event()) {
      mutable_game_event()->::Game_Event::MergeFrom(from.game_event());
    }
    if (from.has_next_command()) {
      set_next_command(from.next_command());
    }
    if (from.has_current_action_time_remaining()) {
      set_current_action_time_remaining(from.current_action_time_remaining());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Referee::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Referee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Referee::CopyFrom(const Referee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Referee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Referee::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fb) != 0x000000fb) return false;

  if (has_yellow()) {
    if (!this->yellow_->IsInitialized()) return false;
  }
  if (has_blue()) {
    if (!this->blue_->IsInitialized()) return false;
  }
  if (has_designated_position()) {
    if (!this->designated_position_->IsInitialized()) return false;
  }
  if (has_game_event()) {
    if (!this->game_event_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->game_events())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->proposed_game_events())) return false;
  return true;
}

void Referee::Swap(Referee* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Referee::InternalSwap(Referee* other) {
  std::swap(packet_timestamp_, other->packet_timestamp_);
  std::swap(stage_, other->stage_);
  std::swap(stage_time_left_, other->stage_time_left_);
  std::swap(command_, other->command_);
  std::swap(command_counter_, other->command_counter_);
  std::swap(command_timestamp_, other->command_timestamp_);
  std::swap(yellow_, other->yellow_);
  std::swap(blue_, other->blue_);
  std::swap(designated_position_, other->designated_position_);
  std::swap(blue_team_on_positive_half_, other->blue_team_on_positive_half_);
  std::swap(game_event_, other->game_event_);
  std::swap(next_command_, other->next_command_);
  game_events_.UnsafeArenaSwap(&other->game_events_);
  proposed_game_events_.UnsafeArenaSwap(&other->proposed_game_events_);
  std::swap(current_action_time_remaining_, other->current_action_time_remaining_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Referee::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Referee_descriptor_;
  metadata.reflection = Referee_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Referee_TeamInfo

// required string name = 1;
bool Referee_TeamInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Referee_TeamInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Referee_TeamInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Referee_TeamInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Referee_TeamInfo::name() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Referee_TeamInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.name)
}
 void Referee_TeamInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Referee.TeamInfo.name)
}
 void Referee_TeamInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Referee.TeamInfo.name)
}
 ::std::string* Referee_TeamInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Referee.TeamInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Referee_TeamInfo::release_name() {
  // @@protoc_insertion_point(field_release:Referee.TeamInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Referee_TeamInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Referee.TeamInfo.name)
}

// required uint32 score = 2;
bool Referee_TeamInfo::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Referee_TeamInfo::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
void Referee_TeamInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void Referee_TeamInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
 ::google::protobuf::uint32 Referee_TeamInfo::score() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.score)
  return score_;
}
 void Referee_TeamInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.score)
}

// required uint32 red_cards = 3;
bool Referee_TeamInfo::has_red_cards() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Referee_TeamInfo::set_has_red_cards() {
  _has_bits_[0] |= 0x00000004u;
}
void Referee_TeamInfo::clear_has_red_cards() {
  _has_bits_[0] &= ~0x00000004u;
}
void Referee_TeamInfo::clear_red_cards() {
  red_cards_ = 0u;
  clear_has_red_cards();
}
 ::google::protobuf::uint32 Referee_TeamInfo::red_cards() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.red_cards)
  return red_cards_;
}
 void Referee_TeamInfo::set_red_cards(::google::protobuf::uint32 value) {
  set_has_red_cards();
  red_cards_ = value;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.red_cards)
}

// repeated uint32 yellow_card_times = 4 [packed = true];
int Referee_TeamInfo::yellow_card_times_size() const {
  return yellow_card_times_.size();
}
void Referee_TeamInfo::clear_yellow_card_times() {
  yellow_card_times_.Clear();
}
 ::google::protobuf::uint32 Referee_TeamInfo::yellow_card_times(int index) const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.yellow_card_times)
  return yellow_card_times_.Get(index);
}
 void Referee_TeamInfo::set_yellow_card_times(int index, ::google::protobuf::uint32 value) {
  yellow_card_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.yellow_card_times)
}
 void Referee_TeamInfo::add_yellow_card_times(::google::protobuf::uint32 value) {
  yellow_card_times_.Add(value);
  // @@protoc_insertion_point(field_add:Referee.TeamInfo.yellow_card_times)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Referee_TeamInfo::yellow_card_times() const {
  // @@protoc_insertion_point(field_list:Referee.TeamInfo.yellow_card_times)
  return yellow_card_times_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Referee_TeamInfo::mutable_yellow_card_times() {
  // @@protoc_insertion_point(field_mutable_list:Referee.TeamInfo.yellow_card_times)
  return &yellow_card_times_;
}

// required uint32 yellow_cards = 5;
bool Referee_TeamInfo::has_yellow_cards() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Referee_TeamInfo::set_has_yellow_cards() {
  _has_bits_[0] |= 0x00000010u;
}
void Referee_TeamInfo::clear_has_yellow_cards() {
  _has_bits_[0] &= ~0x00000010u;
}
void Referee_TeamInfo::clear_yellow_cards() {
  yellow_cards_ = 0u;
  clear_has_yellow_cards();
}
 ::google::protobuf::uint32 Referee_TeamInfo::yellow_cards() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.yellow_cards)
  return yellow_cards_;
}
 void Referee_TeamInfo::set_yellow_cards(::google::protobuf::uint32 value) {
  set_has_yellow_cards();
  yellow_cards_ = value;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.yellow_cards)
}

// required uint32 timeouts = 6;
bool Referee_TeamInfo::has_timeouts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Referee_TeamInfo::set_has_timeouts() {
  _has_bits_[0] |= 0x00000020u;
}
void Referee_TeamInfo::clear_has_timeouts() {
  _has_bits_[0] &= ~0x00000020u;
}
void Referee_TeamInfo::clear_timeouts() {
  timeouts_ = 0u;
  clear_has_timeouts();
}
 ::google::protobuf::uint32 Referee_TeamInfo::timeouts() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.timeouts)
  return timeouts_;
}
 void Referee_TeamInfo::set_timeouts(::google::protobuf::uint32 value) {
  set_has_timeouts();
  timeouts_ = value;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.timeouts)
}

// required uint32 timeout_time = 7;
bool Referee_TeamInfo::has_timeout_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Referee_TeamInfo::set_has_timeout_time() {
  _has_bits_[0] |= 0x00000040u;
}
void Referee_TeamInfo::clear_has_timeout_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void Referee_TeamInfo::clear_timeout_time() {
  timeout_time_ = 0u;
  clear_has_timeout_time();
}
 ::google::protobuf::uint32 Referee_TeamInfo::timeout_time() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.timeout_time)
  return timeout_time_;
}
 void Referee_TeamInfo::set_timeout_time(::google::protobuf::uint32 value) {
  set_has_timeout_time();
  timeout_time_ = value;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.timeout_time)
}

// required uint32 goalkeeper = 8;
bool Referee_TeamInfo::has_goalkeeper() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Referee_TeamInfo::set_has_goalkeeper() {
  _has_bits_[0] |= 0x00000080u;
}
void Referee_TeamInfo::clear_has_goalkeeper() {
  _has_bits_[0] &= ~0x00000080u;
}
void Referee_TeamInfo::clear_goalkeeper() {
  goalkeeper_ = 0u;
  clear_has_goalkeeper();
}
 ::google::protobuf::uint32 Referee_TeamInfo::goalkeeper() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.goalkeeper)
  return goalkeeper_;
}
 void Referee_TeamInfo::set_goalkeeper(::google::protobuf::uint32 value) {
  set_has_goalkeeper();
  goalkeeper_ = value;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.goalkeeper)
}

// optional uint32 foul_counter = 9;
bool Referee_TeamInfo::has_foul_counter() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Referee_TeamInfo::set_has_foul_counter() {
  _has_bits_[0] |= 0x00000100u;
}
void Referee_TeamInfo::clear_has_foul_counter() {
  _has_bits_[0] &= ~0x00000100u;
}
void Referee_TeamInfo::clear_foul_counter() {
  foul_counter_ = 0u;
  clear_has_foul_counter();
}
 ::google::protobuf::uint32 Referee_TeamInfo::foul_counter() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.foul_counter)
  return foul_counter_;
}
 void Referee_TeamInfo::set_foul_counter(::google::protobuf::uint32 value) {
  set_has_foul_counter();
  foul_counter_ = value;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.foul_counter)
}

// optional uint32 ball_placement_failures = 10;
bool Referee_TeamInfo::has_ball_placement_failures() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Referee_TeamInfo::set_has_ball_placement_failures() {
  _has_bits_[0] |= 0x00000200u;
}
void Referee_TeamInfo::clear_has_ball_placement_failures() {
  _has_bits_[0] &= ~0x00000200u;
}
void Referee_TeamInfo::clear_ball_placement_failures() {
  ball_placement_failures_ = 0u;
  clear_has_ball_placement_failures();
}
 ::google::protobuf::uint32 Referee_TeamInfo::ball_placement_failures() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.ball_placement_failures)
  return ball_placement_failures_;
}
 void Referee_TeamInfo::set_ball_placement_failures(::google::protobuf::uint32 value) {
  set_has_ball_placement_failures();
  ball_placement_failures_ = value;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.ball_placement_failures)
}

// optional bool can_place_ball = 12;
bool Referee_TeamInfo::has_can_place_ball() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Referee_TeamInfo::set_has_can_place_ball() {
  _has_bits_[0] |= 0x00000400u;
}
void Referee_TeamInfo::clear_has_can_place_ball() {
  _has_bits_[0] &= ~0x00000400u;
}
void Referee_TeamInfo::clear_can_place_ball() {
  can_place_ball_ = false;
  clear_has_can_place_ball();
}
 bool Referee_TeamInfo::can_place_ball() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.can_place_ball)
  return can_place_ball_;
}
 void Referee_TeamInfo::set_can_place_ball(bool value) {
  set_has_can_place_ball();
  can_place_ball_ = value;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.can_place_ball)
}

// optional uint32 max_allowed_bots = 13;
bool Referee_TeamInfo::has_max_allowed_bots() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Referee_TeamInfo::set_has_max_allowed_bots() {
  _has_bits_[0] |= 0x00000800u;
}
void Referee_TeamInfo::clear_has_max_allowed_bots() {
  _has_bits_[0] &= ~0x00000800u;
}
void Referee_TeamInfo::clear_max_allowed_bots() {
  max_allowed_bots_ = 0u;
  clear_has_max_allowed_bots();
}
 ::google::protobuf::uint32 Referee_TeamInfo::max_allowed_bots() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.max_allowed_bots)
  return max_allowed_bots_;
}
 void Referee_TeamInfo::set_max_allowed_bots(::google::protobuf::uint32 value) {
  set_has_max_allowed_bots();
  max_allowed_bots_ = value;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.max_allowed_bots)
}

// optional bool bot_substitution_intent = 14;
bool Referee_TeamInfo::has_bot_substitution_intent() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Referee_TeamInfo::set_has_bot_substitution_intent() {
  _has_bits_[0] |= 0x00001000u;
}
void Referee_TeamInfo::clear_has_bot_substitution_intent() {
  _has_bits_[0] &= ~0x00001000u;
}
void Referee_TeamInfo::clear_bot_substitution_intent() {
  bot_substitution_intent_ = false;
  clear_has_bot_substitution_intent();
}
 bool Referee_TeamInfo::bot_substitution_intent() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.bot_substitution_intent)
  return bot_substitution_intent_;
}
 void Referee_TeamInfo::set_bot_substitution_intent(bool value) {
  set_has_bot_substitution_intent();
  bot_substitution_intent_ = value;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.bot_substitution_intent)
}

// -------------------------------------------------------------------

// Referee_Point

// required float x = 1;
bool Referee_Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Referee_Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Referee_Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Referee_Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float Referee_Point::x() const {
  // @@protoc_insertion_point(field_get:Referee.Point.x)
  return x_;
}
 void Referee_Point::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Referee.Point.x)
}

// required float y = 2;
bool Referee_Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Referee_Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Referee_Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Referee_Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float Referee_Point::y() const {
  // @@protoc_insertion_point(field_get:Referee.Point.y)
  return y_;
}
 void Referee_Point::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Referee.Point.y)
}

// -------------------------------------------------------------------

// Referee

// required uint64 packet_timestamp = 1;
bool Referee::has_packet_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Referee::set_has_packet_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void Referee::clear_has_packet_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void Referee::clear_packet_timestamp() {
  packet_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_packet_timestamp();
}
 ::google::protobuf::uint64 Referee::packet_timestamp() const {
  // @@protoc_insertion_point(field_get:Referee.packet_timestamp)
  return packet_timestamp_;
}
 void Referee::set_packet_timestamp(::google::protobuf::uint64 value) {
  set_has_packet_timestamp();
  packet_timestamp_ = value;
  // @@protoc_insertion_point(field_set:Referee.packet_timestamp)
}

// required .Referee.Stage stage = 2;
bool Referee::has_stage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Referee::set_has_stage() {
  _has_bits_[0] |= 0x00000002u;
}
void Referee::clear_has_stage() {
  _has_bits_[0] &= ~0x00000002u;
}
void Referee::clear_stage() {
  stage_ = 0;
  clear_has_stage();
}
 ::Referee_Stage Referee::stage() const {
  // @@protoc_insertion_point(field_get:Referee.stage)
  return static_cast< ::Referee_Stage >(stage_);
}
 void Referee::set_stage(::Referee_Stage value) {
  assert(::Referee_Stage_IsValid(value));
  set_has_stage();
  stage_ = value;
  // @@protoc_insertion_point(field_set:Referee.stage)
}

// optional sint32 stage_time_left = 3;
bool Referee::has_stage_time_left() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Referee::set_has_stage_time_left() {
  _has_bits_[0] |= 0x00000004u;
}
void Referee::clear_has_stage_time_left() {
  _has_bits_[0] &= ~0x00000004u;
}
void Referee::clear_stage_time_left() {
  stage_time_left_ = 0;
  clear_has_stage_time_left();
}
 ::google::protobuf::int32 Referee::stage_time_left() const {
  // @@protoc_insertion_point(field_get:Referee.stage_time_left)
  return stage_time_left_;
}
 void Referee::set_stage_time_left(::google::protobuf::int32 value) {
  set_has_stage_time_left();
  stage_time_left_ = value;
  // @@protoc_insertion_point(field_set:Referee.stage_time_left)
}

// required .Referee.Command command = 4;
bool Referee::has_command() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Referee::set_has_command() {
  _has_bits_[0] |= 0x00000008u;
}
void Referee::clear_has_command() {
  _has_bits_[0] &= ~0x00000008u;
}
void Referee::clear_command() {
  command_ = 0;
  clear_has_command();
}
 ::Referee_Command Referee::command() const {
  // @@protoc_insertion_point(field_get:Referee.command)
  return static_cast< ::Referee_Command >(command_);
}
 void Referee::set_command(::Referee_Command value) {
  assert(::Referee_Command_IsValid(value));
  set_has_command();
  command_ = value;
  // @@protoc_insertion_point(field_set:Referee.command)
}

// required uint32 command_counter = 5;
bool Referee::has_command_counter() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Referee::set_has_command_counter() {
  _has_bits_[0] |= 0x00000010u;
}
void Referee::clear_has_command_counter() {
  _has_bits_[0] &= ~0x00000010u;
}
void Referee::clear_command_counter() {
  command_counter_ = 0u;
  clear_has_command_counter();
}
 ::google::protobuf::uint32 Referee::command_counter() const {
  // @@protoc_insertion_point(field_get:Referee.command_counter)
  return command_counter_;
}
 void Referee::set_command_counter(::google::protobuf::uint32 value) {
  set_has_command_counter();
  command_counter_ = value;
  // @@protoc_insertion_point(field_set:Referee.command_counter)
}

// required uint64 command_timestamp = 6;
bool Referee::has_command_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Referee::set_has_command_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
void Referee::clear_has_command_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
void Referee::clear_command_timestamp() {
  command_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_command_timestamp();
}
 ::google::protobuf::uint64 Referee::command_timestamp() const {
  // @@protoc_insertion_point(field_get:Referee.command_timestamp)
  return command_timestamp_;
}
 void Referee::set_command_timestamp(::google::protobuf::uint64 value) {
  set_has_command_timestamp();
  command_timestamp_ = value;
  // @@protoc_insertion_point(field_set:Referee.command_timestamp)
}

// required .Referee.TeamInfo yellow = 7;
bool Referee::has_yellow() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Referee::set_has_yellow() {
  _has_bits_[0] |= 0x00000040u;
}
void Referee::clear_has_yellow() {
  _has_bits_[0] &= ~0x00000040u;
}
void Referee::clear_yellow() {
  if (yellow_ != NULL) yellow_->::Referee_TeamInfo::Clear();
  clear_has_yellow();
}
const ::Referee_TeamInfo& Referee::yellow() const {
  // @@protoc_insertion_point(field_get:Referee.yellow)
  return yellow_ != NULL ? *yellow_ : *default_instance_->yellow_;
}
::Referee_TeamInfo* Referee::mutable_yellow() {
  set_has_yellow();
  if (yellow_ == NULL) {
    yellow_ = new ::Referee_TeamInfo;
  }
  // @@protoc_insertion_point(field_mutable:Referee.yellow)
  return yellow_;
}
::Referee_TeamInfo* Referee::release_yellow() {
  // @@protoc_insertion_point(field_release:Referee.yellow)
  clear_has_yellow();
  ::Referee_TeamInfo* temp = yellow_;
  yellow_ = NULL;
  return temp;
}
void Referee::set_allocated_yellow(::Referee_TeamInfo* yellow) {
  delete yellow_;
  yellow_ = yellow;
  if (yellow) {
    set_has_yellow();
  } else {
    clear_has_yellow();
  }
  // @@protoc_insertion_point(field_set_allocated:Referee.yellow)
}

// required .Referee.TeamInfo blue = 8;
bool Referee::has_blue() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Referee::set_has_blue() {
  _has_bits_[0] |= 0x00000080u;
}
void Referee::clear_has_blue() {
  _has_bits_[0] &= ~0x00000080u;
}
void Referee::clear_blue() {
  if (blue_ != NULL) blue_->::Referee_TeamInfo::Clear();
  clear_has_blue();
}
const ::Referee_TeamInfo& Referee::blue() const {
  // @@protoc_insertion_point(field_get:Referee.blue)
  return blue_ != NULL ? *blue_ : *default_instance_->blue_;
}
::Referee_TeamInfo* Referee::mutable_blue() {
  set_has_blue();
  if (blue_ == NULL) {
    blue_ = new ::Referee_TeamInfo;
  }
  // @@protoc_insertion_point(field_mutable:Referee.blue)
  return blue_;
}
::Referee_TeamInfo* Referee::release_blue() {
  // @@protoc_insertion_point(field_release:Referee.blue)
  clear_has_blue();
  ::Referee_TeamInfo* temp = blue_;
  blue_ = NULL;
  return temp;
}
void Referee::set_allocated_blue(::Referee_TeamInfo* blue) {
  delete blue_;
  blue_ = blue;
  if (blue) {
    set_has_blue();
  } else {
    clear_has_blue();
  }
  // @@protoc_insertion_point(field_set_allocated:Referee.blue)
}

// optional .Referee.Point designated_position = 9;
bool Referee::has_designated_position() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Referee::set_has_designated_position() {
  _has_bits_[0] |= 0x00000100u;
}
void Referee::clear_has_designated_position() {
  _has_bits_[0] &= ~0x00000100u;
}
void Referee::clear_designated_position() {
  if (designated_position_ != NULL) designated_position_->::Referee_Point::Clear();
  clear_has_designated_position();
}
const ::Referee_Point& Referee::designated_position() const {
  // @@protoc_insertion_point(field_get:Referee.designated_position)
  return designated_position_ != NULL ? *designated_position_ : *default_instance_->designated_position_;
}
::Referee_Point* Referee::mutable_designated_position() {
  set_has_designated_position();
  if (designated_position_ == NULL) {
    designated_position_ = new ::Referee_Point;
  }
  // @@protoc_insertion_point(field_mutable:Referee.designated_position)
  return designated_position_;
}
::Referee_Point* Referee::release_designated_position() {
  // @@protoc_insertion_point(field_release:Referee.designated_position)
  clear_has_designated_position();
  ::Referee_Point* temp = designated_position_;
  designated_position_ = NULL;
  return temp;
}
void Referee::set_allocated_designated_position(::Referee_Point* designated_position) {
  delete designated_position_;
  designated_position_ = designated_position;
  if (designated_position) {
    set_has_designated_position();
  } else {
    clear_has_designated_position();
  }
  // @@protoc_insertion_point(field_set_allocated:Referee.designated_position)
}

// optional bool blue_team_on_positive_half = 10;
bool Referee::has_blue_team_on_positive_half() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Referee::set_has_blue_team_on_positive_half() {
  _has_bits_[0] |= 0x00000200u;
}
void Referee::clear_has_blue_team_on_positive_half() {
  _has_bits_[0] &= ~0x00000200u;
}
void Referee::clear_blue_team_on_positive_half() {
  blue_team_on_positive_half_ = false;
  clear_has_blue_team_on_positive_half();
}
 bool Referee::blue_team_on_positive_half() const {
  // @@protoc_insertion_point(field_get:Referee.blue_team_on_positive_half)
  return blue_team_on_positive_half_;
}
 void Referee::set_blue_team_on_positive_half(bool value) {
  set_has_blue_team_on_positive_half();
  blue_team_on_positive_half_ = value;
  // @@protoc_insertion_point(field_set:Referee.blue_team_on_positive_half)
}

// optional .Game_Event game_event = 11 [deprecated = true];
bool Referee::has_game_event() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Referee::set_has_game_event() {
  _has_bits_[0] |= 0x00000400u;
}
void Referee::clear_has_game_event() {
  _has_bits_[0] &= ~0x00000400u;
}
void Referee::clear_game_event() {
  if (game_event_ != NULL) game_event_->::Game_Event::Clear();
  clear_has_game_event();
}
const ::Game_Event& Referee::game_event() const {
  // @@protoc_insertion_point(field_get:Referee.game_event)
  return game_event_ != NULL ? *game_event_ : *default_instance_->game_event_;
}
::Game_Event* Referee::mutable_game_event() {
  set_has_game_event();
  if (game_event_ == NULL) {
    game_event_ = new ::Game_Event;
  }
  // @@protoc_insertion_point(field_mutable:Referee.game_event)
  return game_event_;
}
::Game_Event* Referee::release_game_event() {
  // @@protoc_insertion_point(field_release:Referee.game_event)
  clear_has_game_event();
  ::Game_Event* temp = game_event_;
  game_event_ = NULL;
  return temp;
}
void Referee::set_allocated_game_event(::Game_Event* game_event) {
  delete game_event_;
  game_event_ = game_event;
  if (game_event) {
    set_has_game_event();
  } else {
    clear_has_game_event();
  }
  // @@protoc_insertion_point(field_set_allocated:Referee.game_event)
}

// optional .Referee.Command next_command = 12;
bool Referee::has_next_command() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Referee::set_has_next_command() {
  _has_bits_[0] |= 0x00000800u;
}
void Referee::clear_has_next_command() {
  _has_bits_[0] &= ~0x00000800u;
}
void Referee::clear_next_command() {
  next_command_ = 0;
  clear_has_next_command();
}
 ::Referee_Command Referee::next_command() const {
  // @@protoc_insertion_point(field_get:Referee.next_command)
  return static_cast< ::Referee_Command >(next_command_);
}
 void Referee::set_next_command(::Referee_Command value) {
  assert(::Referee_Command_IsValid(value));
  set_has_next_command();
  next_command_ = value;
  // @@protoc_insertion_point(field_set:Referee.next_command)
}

// repeated .GameEvent game_events = 13;
int Referee::game_events_size() const {
  return game_events_.size();
}
void Referee::clear_game_events() {
  game_events_.Clear();
}
const ::GameEvent& Referee::game_events(int index) const {
  // @@protoc_insertion_point(field_get:Referee.game_events)
  return game_events_.Get(index);
}
::GameEvent* Referee::mutable_game_events(int index) {
  // @@protoc_insertion_point(field_mutable:Referee.game_events)
  return game_events_.Mutable(index);
}
::GameEvent* Referee::add_game_events() {
  // @@protoc_insertion_point(field_add:Referee.game_events)
  return game_events_.Add();
}
::google::protobuf::RepeatedPtrField< ::GameEvent >*
Referee::mutable_game_events() {
  // @@protoc_insertion_point(field_mutable_list:Referee.game_events)
  return &game_events_;
}
const ::google::protobuf::RepeatedPtrField< ::GameEvent >&
Referee::game_events() const {
  // @@protoc_insertion_point(field_list:Referee.game_events)
  return game_events_;
}

// repeated .ProposedGameEvent proposed_game_events = 14;
int Referee::proposed_game_events_size() const {
  return proposed_game_events_.size();
}
void Referee::clear_proposed_game_events() {
  proposed_game_events_.Clear();
}
const ::ProposedGameEvent& Referee::proposed_game_events(int index) const {
  // @@protoc_insertion_point(field_get:Referee.proposed_game_events)
  return proposed_game_events_.Get(index);
}
::ProposedGameEvent* Referee::mutable_proposed_game_events(int index) {
  // @@protoc_insertion_point(field_mutable:Referee.proposed_game_events)
  return proposed_game_events_.Mutable(index);
}
::ProposedGameEvent* Referee::add_proposed_game_events() {
  // @@protoc_insertion_point(field_add:Referee.proposed_game_events)
  return proposed_game_events_.Add();
}
::google::protobuf::RepeatedPtrField< ::ProposedGameEvent >*
Referee::mutable_proposed_game_events() {
  // @@protoc_insertion_point(field_mutable_list:Referee.proposed_game_events)
  return &proposed_game_events_;
}
const ::google::protobuf::RepeatedPtrField< ::ProposedGameEvent >&
Referee::proposed_game_events() const {
  // @@protoc_insertion_point(field_list:Referee.proposed_game_events)
  return proposed_game_events_;
}

// optional int32 current_action_time_remaining = 15;
bool Referee::has_current_action_time_remaining() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Referee::set_has_current_action_time_remaining() {
  _has_bits_[0] |= 0x00004000u;
}
void Referee::clear_has_current_action_time_remaining() {
  _has_bits_[0] &= ~0x00004000u;
}
void Referee::clear_current_action_time_remaining() {
  current_action_time_remaining_ = 0;
  clear_has_current_action_time_remaining();
}
 ::google::protobuf::int32 Referee::current_action_time_remaining() const {
  // @@protoc_insertion_point(field_get:Referee.current_action_time_remaining)
  return current_action_time_remaining_;
}
 void Referee::set_current_action_time_remaining(::google::protobuf::int32 value) {
  set_has_current_action_time_remaining();
  current_action_time_remaining_ = value;
  // @@protoc_insertion_point(field_set:Referee.current_action_time_remaining)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProposedGameEvent::kValidUntilFieldNumber;
const int ProposedGameEvent::kProposerIdFieldNumber;
const int ProposedGameEvent::kGameEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProposedGameEvent::ProposedGameEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProposedGameEvent)
}

void ProposedGameEvent::InitAsDefaultInstance() {
  game_event_ = const_cast< ::GameEvent*>(&::GameEvent::default_instance());
}

ProposedGameEvent::ProposedGameEvent(const ProposedGameEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProposedGameEvent)
}

void ProposedGameEvent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  valid_until_ = GOOGLE_ULONGLONG(0);
  proposer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_event_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProposedGameEvent::~ProposedGameEvent() {
  // @@protoc_insertion_point(destructor:ProposedGameEvent)
  SharedDtor();
}

void ProposedGameEvent::SharedDtor() {
  proposer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete game_event_;
  }
}

void ProposedGameEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProposedGameEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProposedGameEvent_descriptor_;
}

const ProposedGameEvent& ProposedGameEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5freferee_2eproto();
  return *default_instance_;
}

ProposedGameEvent* ProposedGameEvent::default_instance_ = NULL;

ProposedGameEvent* ProposedGameEvent::New(::google::protobuf::Arena* arena) const {
  ProposedGameEvent* n = new ProposedGameEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProposedGameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ProposedGameEvent)
  if (_has_bits_[0 / 32] & 7u) {
    valid_until_ = GOOGLE_ULONGLONG(0);
    if (has_proposer_id()) {
      proposer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_game_event()) {
      if (game_event_ != NULL) game_event_->::GameEvent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ProposedGameEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProposedGameEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 valid_until = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &valid_until_)));
          set_has_valid_until();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_proposer_id;
        break;
      }

      // required string proposer_id = 2;
      case 2: {
        if (tag == 18) {
         parse_proposer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proposer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proposer_id().data(), this->proposer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ProposedGameEvent.proposer_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_game_event;
        break;
      }

      // required .GameEvent game_event = 3;
      case 3: {
        if (tag == 26) {
         parse_game_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProposedGameEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProposedGameEvent)
  return false;
#undef DO_
}

void ProposedGameEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProposedGameEvent)
  // required uint64 valid_until = 1;
  if (has_valid_until()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->valid_until(), output);
  }

  // required string proposer_id = 2;
  if (has_proposer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proposer_id().data(), this->proposer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProposedGameEvent.proposer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->proposer_id(), output);
  }

  // required .GameEvent game_event = 3;
  if (has_game_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->game_event_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProposedGameEvent)
}

::google::protobuf::uint8* ProposedGameEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProposedGameEvent)
  // required uint64 valid_until = 1;
  if (has_valid_until()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->valid_until(), target);
  }

  // required string proposer_id = 2;
  if (has_proposer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proposer_id().data(), this->proposer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProposedGameEvent.proposer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->proposer_id(), target);
  }

  // required .GameEvent game_event = 3;
  if (has_game_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->game_event_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProposedGameEvent)
  return target;
}

int ProposedGameEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProposedGameEvent)
  int total_size = 0;

  if (has_valid_until()) {
    // required uint64 valid_until = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->valid_until());
  }

  if (has_proposer_id()) {
    // required string proposer_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proposer_id());
  }

  if (has_game_event()) {
    // required .GameEvent game_event = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->game_event_);
  }

  return total_size;
}
int ProposedGameEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ProposedGameEvent)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 valid_until = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->valid_until());

    // required string proposer_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proposer_id());

    // required .GameEvent game_event = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->game_event_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProposedGameEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProposedGameEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProposedGameEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProposedGameEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProposedGameEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProposedGameEvent)
    MergeFrom(*source);
  }
}

void ProposedGameEvent::MergeFrom(const ProposedGameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProposedGameEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_valid_until()) {
      set_valid_until(from.valid_until());
    }
    if (from.has_proposer_id()) {
      set_has_proposer_id();
      proposer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposer_id_);
    }
    if (from.has_game_event()) {
      mutable_game_event()->::GameEvent::MergeFrom(from.game_event());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ProposedGameEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProposedGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProposedGameEvent::CopyFrom(const ProposedGameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProposedGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposedGameEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_game_event()) {
    if (!this->game_event_->IsInitialized()) return false;
  }
  return true;
}

void ProposedGameEvent::Swap(ProposedGameEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProposedGameEvent::InternalSwap(ProposedGameEvent* other) {
  std::swap(valid_until_, other->valid_until_);
  proposer_id_.Swap(&other->proposer_id_);
  std::swap(game_event_, other->game_event_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProposedGameEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProposedGameEvent_descriptor_;
  metadata.reflection = ProposedGameEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProposedGameEvent

// required uint64 valid_until = 1;
bool ProposedGameEvent::has_valid_until() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProposedGameEvent::set_has_valid_until() {
  _has_bits_[0] |= 0x00000001u;
}
void ProposedGameEvent::clear_has_valid_until() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProposedGameEvent::clear_valid_until() {
  valid_until_ = GOOGLE_ULONGLONG(0);
  clear_has_valid_until();
}
 ::google::protobuf::uint64 ProposedGameEvent::valid_until() const {
  // @@protoc_insertion_point(field_get:ProposedGameEvent.valid_until)
  return valid_until_;
}
 void ProposedGameEvent::set_valid_until(::google::protobuf::uint64 value) {
  set_has_valid_until();
  valid_until_ = value;
  // @@protoc_insertion_point(field_set:ProposedGameEvent.valid_until)
}

// required string proposer_id = 2;
bool ProposedGameEvent::has_proposer_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProposedGameEvent::set_has_proposer_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ProposedGameEvent::clear_has_proposer_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProposedGameEvent::clear_proposer_id() {
  proposer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proposer_id();
}
 const ::std::string& ProposedGameEvent::proposer_id() const {
  // @@protoc_insertion_point(field_get:ProposedGameEvent.proposer_id)
  return proposer_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProposedGameEvent::set_proposer_id(const ::std::string& value) {
  set_has_proposer_id();
  proposer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProposedGameEvent.proposer_id)
}
 void ProposedGameEvent::set_proposer_id(const char* value) {
  set_has_proposer_id();
  proposer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProposedGameEvent.proposer_id)
}
 void ProposedGameEvent::set_proposer_id(const char* value, size_t size) {
  set_has_proposer_id();
  proposer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProposedGameEvent.proposer_id)
}
 ::std::string* ProposedGameEvent::mutable_proposer_id() {
  set_has_proposer_id();
  // @@protoc_insertion_point(field_mutable:ProposedGameEvent.proposer_id)
  return proposer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProposedGameEvent::release_proposer_id() {
  // @@protoc_insertion_point(field_release:ProposedGameEvent.proposer_id)
  clear_has_proposer_id();
  return proposer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProposedGameEvent::set_allocated_proposer_id(::std::string* proposer_id) {
  if (proposer_id != NULL) {
    set_has_proposer_id();
  } else {
    clear_has_proposer_id();
  }
  proposer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proposer_id);
  // @@protoc_insertion_point(field_set_allocated:ProposedGameEvent.proposer_id)
}

// required .GameEvent game_event = 3;
bool ProposedGameEvent::has_game_event() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProposedGameEvent::set_has_game_event() {
  _has_bits_[0] |= 0x00000004u;
}
void ProposedGameEvent::clear_has_game_event() {
  _has_bits_[0] &= ~0x00000004u;
}
void ProposedGameEvent::clear_game_event() {
  if (game_event_ != NULL) game_event_->::GameEvent::Clear();
  clear_has_game_event();
}
const ::GameEvent& ProposedGameEvent::game_event() const {
  // @@protoc_insertion_point(field_get:ProposedGameEvent.game_event)
  return game_event_ != NULL ? *game_event_ : *default_instance_->game_event_;
}
::GameEvent* ProposedGameEvent::mutable_game_event() {
  set_has_game_event();
  if (game_event_ == NULL) {
    game_event_ = new ::GameEvent;
  }
  // @@protoc_insertion_point(field_mutable:ProposedGameEvent.game_event)
  return game_event_;
}
::GameEvent* ProposedGameEvent::release_game_event() {
  // @@protoc_insertion_point(field_release:ProposedGameEvent.game_event)
  clear_has_game_event();
  ::GameEvent* temp = game_event_;
  game_event_ = NULL;
  return temp;
}
void ProposedGameEvent::set_allocated_game_event(::GameEvent* game_event) {
  delete game_event_;
  game_event_ = game_event;
  if (game_event) {
    set_has_game_event();
  } else {
    clear_has_game_event();
  }
  // @@protoc_insertion_point(field_set_allocated:ProposedGameEvent.game_event)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
