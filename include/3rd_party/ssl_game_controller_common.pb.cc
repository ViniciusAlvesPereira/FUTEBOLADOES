// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_game_controller_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ssl_game_controller_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BotId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BotId_reflection_ = NULL;
const ::google::protobuf::Descriptor* Location_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Location_reflection_ = NULL;
const ::google::protobuf::Descriptor* ControllerReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControllerReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ControllerReply_StatusCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ControllerReply_Verification_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Signature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Signature_reflection_ = NULL;
const ::google::protobuf::Descriptor* BallSpeedMeasurement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BallSpeedMeasurement_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Team_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ssl_5fgame_5fcontroller_5fcommon_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ssl_5fgame_5fcontroller_5fcommon_2eproto() {
  protobuf_AddDesc_ssl_5fgame_5fcontroller_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ssl_game_controller_common.proto");
  GOOGLE_CHECK(file != NULL);
  BotId_descriptor_ = file->message_type(0);
  static const int BotId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotId, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotId, team_),
  };
  BotId_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BotId_descriptor_,
      BotId::default_instance_,
      BotId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotId, _has_bits_[0]),
      -1,
      -1,
      sizeof(BotId),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotId, _internal_metadata_),
      -1);
  Location_descriptor_ = file->message_type(1);
  static const int Location_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, y_),
  };
  Location_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Location_descriptor_,
      Location::default_instance_,
      Location_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _has_bits_[0]),
      -1,
      -1,
      sizeof(Location),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _internal_metadata_),
      -1);
  ControllerReply_descriptor_ = file->message_type(2);
  static const int ControllerReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerReply, status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerReply, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerReply, next_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerReply, verification_),
  };
  ControllerReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ControllerReply_descriptor_,
      ControllerReply::default_instance_,
      ControllerReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerReply, _has_bits_[0]),
      -1,
      -1,
      sizeof(ControllerReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerReply, _internal_metadata_),
      -1);
  ControllerReply_StatusCode_descriptor_ = ControllerReply_descriptor_->enum_type(0);
  ControllerReply_Verification_descriptor_ = ControllerReply_descriptor_->enum_type(1);
  Signature_descriptor_ = file->message_type(3);
  static const int Signature_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, pkcs1v15_),
  };
  Signature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Signature_descriptor_,
      Signature::default_instance_,
      Signature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, _has_bits_[0]),
      -1,
      -1,
      sizeof(Signature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, _internal_metadata_),
      -1);
  BallSpeedMeasurement_descriptor_ = file->message_type(4);
  static const int BallSpeedMeasurement_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallSpeedMeasurement, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallSpeedMeasurement, ball_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallSpeedMeasurement, initial_ball_speed_),
  };
  BallSpeedMeasurement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BallSpeedMeasurement_descriptor_,
      BallSpeedMeasurement::default_instance_,
      BallSpeedMeasurement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallSpeedMeasurement, _has_bits_[0]),
      -1,
      -1,
      sizeof(BallSpeedMeasurement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallSpeedMeasurement, _internal_metadata_),
      -1);
  Team_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ssl_5fgame_5fcontroller_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BotId_descriptor_, &BotId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Location_descriptor_, &Location::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ControllerReply_descriptor_, &ControllerReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Signature_descriptor_, &Signature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BallSpeedMeasurement_descriptor_, &BallSpeedMeasurement::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ssl_5fgame_5fcontroller_5fcommon_2eproto() {
  delete BotId::default_instance_;
  delete BotId_reflection_;
  delete Location::default_instance_;
  delete Location_reflection_;
  delete ControllerReply::default_instance_;
  delete ControllerReply_reflection_;
  delete Signature::default_instance_;
  delete Signature_reflection_;
  delete BallSpeedMeasurement::default_instance_;
  delete BallSpeedMeasurement_reflection_;
}

void protobuf_AddDesc_ssl_5fgame_5fcontroller_5fcommon_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ssl_5fgame_5fcontroller_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n ssl_game_controller_common.proto\"(\n\005Bo"
    "tId\022\n\n\002id\030\001 \001(\005\022\023\n\004team\030\002 \001(\0162\005.Team\" \n\010"
    "Location\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"\241\002\n\017Contr"
    "ollerReply\0220\n\013status_code\030\001 \001(\0162\033.Contro"
    "llerReply.StatusCode\022\016\n\006reason\030\002 \001(\t\022\022\n\n"
    "next_token\030\003 \001(\t\0223\n\014verification\030\004 \001(\0162\035"
    ".ControllerReply.Verification\";\n\nStatusC"
    "ode\022\027\n\023UNKNOWN_STATUS_CODE\020\000\022\006\n\002OK\020\001\022\014\n\010"
    "REJECTED\020\002\"F\n\014Verification\022\030\n\024UNKNOWN_VE"
    "RIFICATION\020\000\022\014\n\010VERIFIED\020\001\022\016\n\nUNVERIFIED"
    "\020\002\",\n\tSignature\022\r\n\005token\030\001 \002(\t\022\020\n\010pkcs1v"
    "15\030\002 \002(\014\"Y\n\024BallSpeedMeasurement\022\021\n\ttime"
    "stamp\030\001 \002(\004\022\022\n\nball_speed\030\002 \002(\002\022\032\n\022initi"
    "al_ball_speed\030\003 \001(\002*)\n\004Team\022\013\n\007UNKNOWN\020\000"
    "\022\n\n\006YELLOW\020\001\022\010\n\004BLUE\020\002", 582);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssl_game_controller_common.proto", &protobuf_RegisterTypes);
  BotId::default_instance_ = new BotId();
  Location::default_instance_ = new Location();
  ControllerReply::default_instance_ = new ControllerReply();
  Signature::default_instance_ = new Signature();
  BallSpeedMeasurement::default_instance_ = new BallSpeedMeasurement();
  BotId::default_instance_->InitAsDefaultInstance();
  Location::default_instance_->InitAsDefaultInstance();
  ControllerReply::default_instance_->InitAsDefaultInstance();
  Signature::default_instance_->InitAsDefaultInstance();
  BallSpeedMeasurement::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ssl_5fgame_5fcontroller_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ssl_5fgame_5fcontroller_5fcommon_2eproto {
  StaticDescriptorInitializer_ssl_5fgame_5fcontroller_5fcommon_2eproto() {
    protobuf_AddDesc_ssl_5fgame_5fcontroller_5fcommon_2eproto();
  }
} static_descriptor_initializer_ssl_5fgame_5fcontroller_5fcommon_2eproto_;
const ::google::protobuf::EnumDescriptor* Team_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_descriptor_;
}
bool Team_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BotId::kIdFieldNumber;
const int BotId::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BotId::BotId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BotId)
}

void BotId::InitAsDefaultInstance() {
}

BotId::BotId(const BotId& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BotId)
}

void BotId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  team_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BotId::~BotId() {
  // @@protoc_insertion_point(destructor:BotId)
  SharedDtor();
}

void BotId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BotId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BotId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BotId_descriptor_;
}

const BotId& BotId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fgame_5fcontroller_5fcommon_2eproto();
  return *default_instance_;
}

BotId* BotId::default_instance_ = NULL;

BotId* BotId::New(::google::protobuf::Arena* arena) const {
  BotId* n = new BotId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BotId::Clear() {
// @@protoc_insertion_point(message_clear_start:BotId)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BotId, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BotId*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, team_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BotId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BotId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team;
        break;
      }

      // optional .Team team = 2;
      case 2: {
        if (tag == 16) {
         parse_team:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BotId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BotId)
  return false;
#undef DO_
}

void BotId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BotId)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .Team team = 2;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BotId)
}

::google::protobuf::uint8* BotId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BotId)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .Team team = 2;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BotId)
  return target;
}

int BotId::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BotId)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .Team team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BotId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BotId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BotId* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BotId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BotId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BotId)
    MergeFrom(*source);
  }
}

void BotId::MergeFrom(const BotId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BotId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BotId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BotId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BotId::CopyFrom(const BotId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BotId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BotId::IsInitialized() const {

  return true;
}

void BotId::Swap(BotId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BotId::InternalSwap(BotId* other) {
  std::swap(id_, other->id_);
  std::swap(team_, other->team_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BotId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BotId_descriptor_;
  metadata.reflection = BotId_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BotId

// optional int32 id = 1;
bool BotId::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BotId::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BotId::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BotId::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 BotId::id() const {
  // @@protoc_insertion_point(field_get:BotId.id)
  return id_;
}
 void BotId::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:BotId.id)
}

// optional .Team team = 2;
bool BotId::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BotId::set_has_team() {
  _has_bits_[0] |= 0x00000002u;
}
void BotId::clear_has_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void BotId::clear_team() {
  team_ = 0;
  clear_has_team();
}
 ::Team BotId::team() const {
  // @@protoc_insertion_point(field_get:BotId.team)
  return static_cast< ::Team >(team_);
}
 void BotId::set_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:BotId.team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Location::kXFieldNumber;
const int Location::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Location::Location()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Location)
}

void Location::InitAsDefaultInstance() {
}

Location::Location(const Location& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Location)
}

void Location::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:Location)
  SharedDtor();
}

void Location::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Location::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Location_descriptor_;
}

const Location& Location::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fgame_5fcontroller_5fcommon_2eproto();
  return *default_instance_;
}

Location* Location::default_instance_ = NULL;

Location* Location::New(::google::protobuf::Arena* arena) const {
  Location* n = new Location;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:Location)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Location, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Location*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Location)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Location)
  return false;
#undef DO_
}

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Location)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Location)
}

::google::protobuf::uint8* Location::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Location)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Location)
  return target;
}

int Location::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Location)
  int total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
int Location::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Location)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Location)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Location* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Location>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Location)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Location::Swap(Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Location::InternalSwap(Location* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Location::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Location_descriptor_;
  metadata.reflection = Location_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Location

// required float x = 1;
bool Location::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Location::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Location::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Location::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float Location::x() const {
  // @@protoc_insertion_point(field_get:Location.x)
  return x_;
}
 void Location::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Location.x)
}

// required float y = 2;
bool Location::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Location::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Location::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Location::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float Location::y() const {
  // @@protoc_insertion_point(field_get:Location.y)
  return y_;
}
 void Location::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Location.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ControllerReply_StatusCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControllerReply_StatusCode_descriptor_;
}
bool ControllerReply_StatusCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ControllerReply_StatusCode ControllerReply::UNKNOWN_STATUS_CODE;
const ControllerReply_StatusCode ControllerReply::OK;
const ControllerReply_StatusCode ControllerReply::REJECTED;
const ControllerReply_StatusCode ControllerReply::StatusCode_MIN;
const ControllerReply_StatusCode ControllerReply::StatusCode_MAX;
const int ControllerReply::StatusCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ControllerReply_Verification_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControllerReply_Verification_descriptor_;
}
bool ControllerReply_Verification_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ControllerReply_Verification ControllerReply::UNKNOWN_VERIFICATION;
const ControllerReply_Verification ControllerReply::VERIFIED;
const ControllerReply_Verification ControllerReply::UNVERIFIED;
const ControllerReply_Verification ControllerReply::Verification_MIN;
const ControllerReply_Verification ControllerReply::Verification_MAX;
const int ControllerReply::Verification_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerReply::kStatusCodeFieldNumber;
const int ControllerReply::kReasonFieldNumber;
const int ControllerReply::kNextTokenFieldNumber;
const int ControllerReply::kVerificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerReply::ControllerReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ControllerReply)
}

void ControllerReply::InitAsDefaultInstance() {
}

ControllerReply::ControllerReply(const ControllerReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ControllerReply)
}

void ControllerReply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_code_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verification_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControllerReply::~ControllerReply() {
  // @@protoc_insertion_point(destructor:ControllerReply)
  SharedDtor();
}

void ControllerReply::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ControllerReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControllerReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControllerReply_descriptor_;
}

const ControllerReply& ControllerReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fgame_5fcontroller_5fcommon_2eproto();
  return *default_instance_;
}

ControllerReply* ControllerReply::default_instance_ = NULL;

ControllerReply* ControllerReply::New(::google::protobuf::Arena* arena) const {
  ControllerReply* n = new ControllerReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControllerReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ControllerReply)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ControllerReply, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ControllerReply*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(status_code_, verification_);
    if (has_reason()) {
      reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_next_token()) {
      next_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ControllerReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ControllerReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ControllerReply.StatusCode status_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ControllerReply_StatusCode_IsValid(value)) {
            set_status_code(static_cast< ::ControllerReply_StatusCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reason;
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (tag == 18) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ControllerReply.reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_next_token;
        break;
      }

      // optional string next_token = 3;
      case 3: {
        if (tag == 26) {
         parse_next_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->next_token().data(), this->next_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ControllerReply.next_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_verification;
        break;
      }

      // optional .ControllerReply.Verification verification = 4;
      case 4: {
        if (tag == 32) {
         parse_verification:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ControllerReply_Verification_IsValid(value)) {
            set_verification(static_cast< ::ControllerReply_Verification >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ControllerReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ControllerReply)
  return false;
#undef DO_
}

void ControllerReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ControllerReply)
  // optional .ControllerReply.StatusCode status_code = 1;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status_code(), output);
  }

  // optional string reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ControllerReply.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  // optional string next_token = 3;
  if (has_next_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->next_token().data(), this->next_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ControllerReply.next_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->next_token(), output);
  }

  // optional .ControllerReply.Verification verification = 4;
  if (has_verification()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->verification(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ControllerReply)
}

::google::protobuf::uint8* ControllerReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControllerReply)
  // optional .ControllerReply.StatusCode status_code = 1;
  if (has_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status_code(), target);
  }

  // optional string reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ControllerReply.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  // optional string next_token = 3;
  if (has_next_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->next_token().data(), this->next_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ControllerReply.next_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->next_token(), target);
  }

  // optional .ControllerReply.Verification verification = 4;
  if (has_verification()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->verification(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControllerReply)
  return target;
}

int ControllerReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ControllerReply)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .ControllerReply.StatusCode status_code = 1;
    if (has_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status_code());
    }

    // optional string reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional string next_token = 3;
    if (has_next_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->next_token());
    }

    // optional .ControllerReply.Verification verification = 4;
    if (has_verification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->verification());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControllerReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ControllerReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ControllerReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ControllerReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ControllerReply)
    MergeFrom(*source);
  }
}

void ControllerReply::MergeFrom(const ControllerReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControllerReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status_code()) {
      set_status_code(from.status_code());
    }
    if (from.has_reason()) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (from.has_next_token()) {
      set_has_next_token();
      next_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_token_);
    }
    if (from.has_verification()) {
      set_verification(from.verification());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ControllerReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ControllerReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerReply::CopyFrom(const ControllerReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControllerReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerReply::IsInitialized() const {

  return true;
}

void ControllerReply::Swap(ControllerReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerReply::InternalSwap(ControllerReply* other) {
  std::swap(status_code_, other->status_code_);
  reason_.Swap(&other->reason_);
  next_token_.Swap(&other->next_token_);
  std::swap(verification_, other->verification_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControllerReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControllerReply_descriptor_;
  metadata.reflection = ControllerReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ControllerReply

// optional .ControllerReply.StatusCode status_code = 1;
bool ControllerReply::has_status_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ControllerReply::set_has_status_code() {
  _has_bits_[0] |= 0x00000001u;
}
void ControllerReply::clear_has_status_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void ControllerReply::clear_status_code() {
  status_code_ = 0;
  clear_has_status_code();
}
 ::ControllerReply_StatusCode ControllerReply::status_code() const {
  // @@protoc_insertion_point(field_get:ControllerReply.status_code)
  return static_cast< ::ControllerReply_StatusCode >(status_code_);
}
 void ControllerReply::set_status_code(::ControllerReply_StatusCode value) {
  assert(::ControllerReply_StatusCode_IsValid(value));
  set_has_status_code();
  status_code_ = value;
  // @@protoc_insertion_point(field_set:ControllerReply.status_code)
}

// optional string reason = 2;
bool ControllerReply::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ControllerReply::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
void ControllerReply::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
void ControllerReply::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
 const ::std::string& ControllerReply::reason() const {
  // @@protoc_insertion_point(field_get:ControllerReply.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ControllerReply::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ControllerReply.reason)
}
 void ControllerReply::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ControllerReply.reason)
}
 void ControllerReply::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ControllerReply.reason)
}
 ::std::string* ControllerReply::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:ControllerReply.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ControllerReply::release_reason() {
  // @@protoc_insertion_point(field_release:ControllerReply.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ControllerReply::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:ControllerReply.reason)
}

// optional string next_token = 3;
bool ControllerReply::has_next_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ControllerReply::set_has_next_token() {
  _has_bits_[0] |= 0x00000004u;
}
void ControllerReply::clear_has_next_token() {
  _has_bits_[0] &= ~0x00000004u;
}
void ControllerReply::clear_next_token() {
  next_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_next_token();
}
 const ::std::string& ControllerReply::next_token() const {
  // @@protoc_insertion_point(field_get:ControllerReply.next_token)
  return next_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ControllerReply::set_next_token(const ::std::string& value) {
  set_has_next_token();
  next_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ControllerReply.next_token)
}
 void ControllerReply::set_next_token(const char* value) {
  set_has_next_token();
  next_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ControllerReply.next_token)
}
 void ControllerReply::set_next_token(const char* value, size_t size) {
  set_has_next_token();
  next_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ControllerReply.next_token)
}
 ::std::string* ControllerReply::mutable_next_token() {
  set_has_next_token();
  // @@protoc_insertion_point(field_mutable:ControllerReply.next_token)
  return next_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ControllerReply::release_next_token() {
  // @@protoc_insertion_point(field_release:ControllerReply.next_token)
  clear_has_next_token();
  return next_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ControllerReply::set_allocated_next_token(::std::string* next_token) {
  if (next_token != NULL) {
    set_has_next_token();
  } else {
    clear_has_next_token();
  }
  next_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_token);
  // @@protoc_insertion_point(field_set_allocated:ControllerReply.next_token)
}

// optional .ControllerReply.Verification verification = 4;
bool ControllerReply::has_verification() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ControllerReply::set_has_verification() {
  _has_bits_[0] |= 0x00000008u;
}
void ControllerReply::clear_has_verification() {
  _has_bits_[0] &= ~0x00000008u;
}
void ControllerReply::clear_verification() {
  verification_ = 0;
  clear_has_verification();
}
 ::ControllerReply_Verification ControllerReply::verification() const {
  // @@protoc_insertion_point(field_get:ControllerReply.verification)
  return static_cast< ::ControllerReply_Verification >(verification_);
}
 void ControllerReply::set_verification(::ControllerReply_Verification value) {
  assert(::ControllerReply_Verification_IsValid(value));
  set_has_verification();
  verification_ = value;
  // @@protoc_insertion_point(field_set:ControllerReply.verification)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signature::kTokenFieldNumber;
const int Signature::kPkcs1V15FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signature::Signature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Signature)
}

void Signature::InitAsDefaultInstance() {
}

Signature::Signature(const Signature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Signature)
}

void Signature::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pkcs1v15_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Signature::~Signature() {
  // @@protoc_insertion_point(destructor:Signature)
  SharedDtor();
}

void Signature::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pkcs1v15_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Signature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Signature_descriptor_;
}

const Signature& Signature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fgame_5fcontroller_5fcommon_2eproto();
  return *default_instance_;
}

Signature* Signature::default_instance_ = NULL;

Signature* Signature::New(::google::protobuf::Arena* arena) const {
  Signature* n = new Signature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Signature::Clear() {
// @@protoc_insertion_point(message_clear_start:Signature)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_pkcs1v15()) {
      pkcs1v15_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Signature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Signature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Signature.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pkcs1v15;
        break;
      }

      // required bytes pkcs1v15 = 2;
      case 2: {
        if (tag == 18) {
         parse_pkcs1v15:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pkcs1v15()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Signature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Signature)
  return false;
#undef DO_
}

void Signature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Signature)
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Signature.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // required bytes pkcs1v15 = 2;
  if (has_pkcs1v15()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pkcs1v15(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Signature)
}

::google::protobuf::uint8* Signature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Signature)
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Signature.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // required bytes pkcs1v15 = 2;
  if (has_pkcs1v15()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pkcs1v15(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Signature)
  return target;
}

int Signature::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Signature)
  int total_size = 0;

  if (has_token()) {
    // required string token = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  if (has_pkcs1v15()) {
    // required bytes pkcs1v15 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pkcs1v15());
  }

  return total_size;
}
int Signature::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Signature)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string token = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());

    // required bytes pkcs1v15 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pkcs1v15());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Signature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Signature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Signature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Signature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Signature)
    MergeFrom(*source);
  }
}

void Signature::MergeFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Signature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (from.has_pkcs1v15()) {
      set_has_pkcs1v15();
      pkcs1v15_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pkcs1v15_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Signature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signature::CopyFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Signature::Swap(Signature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signature::InternalSwap(Signature* other) {
  token_.Swap(&other->token_);
  pkcs1v15_.Swap(&other->pkcs1v15_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Signature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Signature_descriptor_;
  metadata.reflection = Signature_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Signature

// required string token = 1;
bool Signature::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Signature::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void Signature::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void Signature::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
 const ::std::string& Signature::token() const {
  // @@protoc_insertion_point(field_get:Signature.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Signature::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Signature.token)
}
 void Signature::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Signature.token)
}
 void Signature::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Signature.token)
}
 ::std::string* Signature::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:Signature.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Signature::release_token() {
  // @@protoc_insertion_point(field_release:Signature.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Signature::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Signature.token)
}

// required bytes pkcs1v15 = 2;
bool Signature::has_pkcs1v15() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Signature::set_has_pkcs1v15() {
  _has_bits_[0] |= 0x00000002u;
}
void Signature::clear_has_pkcs1v15() {
  _has_bits_[0] &= ~0x00000002u;
}
void Signature::clear_pkcs1v15() {
  pkcs1v15_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pkcs1v15();
}
 const ::std::string& Signature::pkcs1v15() const {
  // @@protoc_insertion_point(field_get:Signature.pkcs1v15)
  return pkcs1v15_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Signature::set_pkcs1v15(const ::std::string& value) {
  set_has_pkcs1v15();
  pkcs1v15_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Signature.pkcs1v15)
}
 void Signature::set_pkcs1v15(const char* value) {
  set_has_pkcs1v15();
  pkcs1v15_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Signature.pkcs1v15)
}
 void Signature::set_pkcs1v15(const void* value, size_t size) {
  set_has_pkcs1v15();
  pkcs1v15_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Signature.pkcs1v15)
}
 ::std::string* Signature::mutable_pkcs1v15() {
  set_has_pkcs1v15();
  // @@protoc_insertion_point(field_mutable:Signature.pkcs1v15)
  return pkcs1v15_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Signature::release_pkcs1v15() {
  // @@protoc_insertion_point(field_release:Signature.pkcs1v15)
  clear_has_pkcs1v15();
  return pkcs1v15_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Signature::set_allocated_pkcs1v15(::std::string* pkcs1v15) {
  if (pkcs1v15 != NULL) {
    set_has_pkcs1v15();
  } else {
    clear_has_pkcs1v15();
  }
  pkcs1v15_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pkcs1v15);
  // @@protoc_insertion_point(field_set_allocated:Signature.pkcs1v15)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BallSpeedMeasurement::kTimestampFieldNumber;
const int BallSpeedMeasurement::kBallSpeedFieldNumber;
const int BallSpeedMeasurement::kInitialBallSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BallSpeedMeasurement::BallSpeedMeasurement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BallSpeedMeasurement)
}

void BallSpeedMeasurement::InitAsDefaultInstance() {
}

BallSpeedMeasurement::BallSpeedMeasurement(const BallSpeedMeasurement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BallSpeedMeasurement)
}

void BallSpeedMeasurement::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  ball_speed_ = 0;
  initial_ball_speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BallSpeedMeasurement::~BallSpeedMeasurement() {
  // @@protoc_insertion_point(destructor:BallSpeedMeasurement)
  SharedDtor();
}

void BallSpeedMeasurement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BallSpeedMeasurement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallSpeedMeasurement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BallSpeedMeasurement_descriptor_;
}

const BallSpeedMeasurement& BallSpeedMeasurement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fgame_5fcontroller_5fcommon_2eproto();
  return *default_instance_;
}

BallSpeedMeasurement* BallSpeedMeasurement::default_instance_ = NULL;

BallSpeedMeasurement* BallSpeedMeasurement::New(::google::protobuf::Arena* arena) const {
  BallSpeedMeasurement* n = new BallSpeedMeasurement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BallSpeedMeasurement::Clear() {
// @@protoc_insertion_point(message_clear_start:BallSpeedMeasurement)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BallSpeedMeasurement, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BallSpeedMeasurement*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timestamp_, initial_ball_speed_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BallSpeedMeasurement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BallSpeedMeasurement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_ball_speed;
        break;
      }

      // required float ball_speed = 2;
      case 2: {
        if (tag == 21) {
         parse_ball_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ball_speed_)));
          set_has_ball_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_initial_ball_speed;
        break;
      }

      // optional float initial_ball_speed = 3;
      case 3: {
        if (tag == 29) {
         parse_initial_ball_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &initial_ball_speed_)));
          set_has_initial_ball_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BallSpeedMeasurement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BallSpeedMeasurement)
  return false;
#undef DO_
}

void BallSpeedMeasurement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BallSpeedMeasurement)
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // required float ball_speed = 2;
  if (has_ball_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ball_speed(), output);
  }

  // optional float initial_ball_speed = 3;
  if (has_initial_ball_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->initial_ball_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BallSpeedMeasurement)
}

::google::protobuf::uint8* BallSpeedMeasurement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BallSpeedMeasurement)
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // required float ball_speed = 2;
  if (has_ball_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ball_speed(), target);
  }

  // optional float initial_ball_speed = 3;
  if (has_initial_ball_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->initial_ball_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BallSpeedMeasurement)
  return target;
}

int BallSpeedMeasurement::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:BallSpeedMeasurement)
  int total_size = 0;

  if (has_timestamp()) {
    // required uint64 timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  if (has_ball_speed()) {
    // required float ball_speed = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
int BallSpeedMeasurement::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BallSpeedMeasurement)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());

    // required float ball_speed = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional float initial_ball_speed = 3;
  if (has_initial_ball_speed()) {
    total_size += 1 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallSpeedMeasurement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BallSpeedMeasurement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BallSpeedMeasurement* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BallSpeedMeasurement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BallSpeedMeasurement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BallSpeedMeasurement)
    MergeFrom(*source);
  }
}

void BallSpeedMeasurement::MergeFrom(const BallSpeedMeasurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BallSpeedMeasurement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_ball_speed()) {
      set_ball_speed(from.ball_speed());
    }
    if (from.has_initial_ball_speed()) {
      set_initial_ball_speed(from.initial_ball_speed());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BallSpeedMeasurement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BallSpeedMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallSpeedMeasurement::CopyFrom(const BallSpeedMeasurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BallSpeedMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallSpeedMeasurement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BallSpeedMeasurement::Swap(BallSpeedMeasurement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BallSpeedMeasurement::InternalSwap(BallSpeedMeasurement* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(ball_speed_, other->ball_speed_);
  std::swap(initial_ball_speed_, other->initial_ball_speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BallSpeedMeasurement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BallSpeedMeasurement_descriptor_;
  metadata.reflection = BallSpeedMeasurement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BallSpeedMeasurement

// required uint64 timestamp = 1;
bool BallSpeedMeasurement::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BallSpeedMeasurement::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void BallSpeedMeasurement::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void BallSpeedMeasurement::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
 ::google::protobuf::uint64 BallSpeedMeasurement::timestamp() const {
  // @@protoc_insertion_point(field_get:BallSpeedMeasurement.timestamp)
  return timestamp_;
}
 void BallSpeedMeasurement::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:BallSpeedMeasurement.timestamp)
}

// required float ball_speed = 2;
bool BallSpeedMeasurement::has_ball_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BallSpeedMeasurement::set_has_ball_speed() {
  _has_bits_[0] |= 0x00000002u;
}
void BallSpeedMeasurement::clear_has_ball_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
void BallSpeedMeasurement::clear_ball_speed() {
  ball_speed_ = 0;
  clear_has_ball_speed();
}
 float BallSpeedMeasurement::ball_speed() const {
  // @@protoc_insertion_point(field_get:BallSpeedMeasurement.ball_speed)
  return ball_speed_;
}
 void BallSpeedMeasurement::set_ball_speed(float value) {
  set_has_ball_speed();
  ball_speed_ = value;
  // @@protoc_insertion_point(field_set:BallSpeedMeasurement.ball_speed)
}

// optional float initial_ball_speed = 3;
bool BallSpeedMeasurement::has_initial_ball_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BallSpeedMeasurement::set_has_initial_ball_speed() {
  _has_bits_[0] |= 0x00000004u;
}
void BallSpeedMeasurement::clear_has_initial_ball_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
void BallSpeedMeasurement::clear_initial_ball_speed() {
  initial_ball_speed_ = 0;
  clear_has_initial_ball_speed();
}
 float BallSpeedMeasurement::initial_ball_speed() const {
  // @@protoc_insertion_point(field_get:BallSpeedMeasurement.initial_ball_speed)
  return initial_ball_speed_;
}
 void BallSpeedMeasurement::set_initial_ball_speed(float value) {
  set_has_initial_ball_speed();
  initial_ball_speed_ = value;
  // @@protoc_insertion_point(field_set:BallSpeedMeasurement.initial_ball_speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
