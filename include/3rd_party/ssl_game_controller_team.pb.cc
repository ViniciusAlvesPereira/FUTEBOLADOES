// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_game_controller_team.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ssl_game_controller_team.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TeamRegistration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRegistration_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamToController_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamToController_reflection_ = NULL;
struct TeamToControllerOneofInstance {
  ::google::protobuf::int32 desired_keeper_;
  int advantage_response_;
  bool substitute_bot_;
  bool ping_;
}* TeamToController_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* TeamToController_AdvantageResponse_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ControllerToTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControllerToTeam_reflection_ = NULL;
struct ControllerToTeamOneofInstance {
  const ::ControllerReply* controller_reply_;
  const ::AdvantageChoice* advantage_choice_;
}* ControllerToTeam_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* AdvantageChoice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvantageChoice_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AdvantageChoice_Foul_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ssl_5fgame_5fcontroller_5fteam_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ssl_5fgame_5fcontroller_5fteam_2eproto() {
  protobuf_AddDesc_ssl_5fgame_5fcontroller_5fteam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ssl_game_controller_team.proto");
  GOOGLE_CHECK(file != NULL);
  TeamRegistration_descriptor_ = file->message_type(0);
  static const int TeamRegistration_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRegistration, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRegistration, signature_),
  };
  TeamRegistration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TeamRegistration_descriptor_,
      TeamRegistration::default_instance_,
      TeamRegistration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRegistration, _has_bits_[0]),
      -1,
      -1,
      sizeof(TeamRegistration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRegistration, _internal_metadata_),
      -1);
  TeamToController_descriptor_ = file->message_type(1);
  static const int TeamToController_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamToController, signature_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TeamToController_default_oneof_instance_, desired_keeper_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TeamToController_default_oneof_instance_, advantage_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TeamToController_default_oneof_instance_, substitute_bot_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TeamToController_default_oneof_instance_, ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamToController, msg_),
  };
  TeamToController_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TeamToController_descriptor_,
      TeamToController::default_instance_,
      TeamToController_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamToController, _has_bits_[0]),
      -1,
      -1,
      TeamToController_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamToController, _oneof_case_[0]),
      sizeof(TeamToController),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamToController, _internal_metadata_),
      -1);
  TeamToController_AdvantageResponse_descriptor_ = TeamToController_descriptor_->enum_type(0);
  ControllerToTeam_descriptor_ = file->message_type(2);
  static const int ControllerToTeam_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ControllerToTeam_default_oneof_instance_, controller_reply_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ControllerToTeam_default_oneof_instance_, advantage_choice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerToTeam, msg_),
  };
  ControllerToTeam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ControllerToTeam_descriptor_,
      ControllerToTeam::default_instance_,
      ControllerToTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerToTeam, _has_bits_[0]),
      -1,
      -1,
      ControllerToTeam_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerToTeam, _oneof_case_[0]),
      sizeof(ControllerToTeam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerToTeam, _internal_metadata_),
      -1);
  AdvantageChoice_descriptor_ = file->message_type(3);
  static const int AdvantageChoice_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantageChoice, foul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantageChoice, bot_crash_unique_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantageChoice, bot_pushed_bot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantageChoice, attacker_touched_opponent_in_defense_area_),
  };
  AdvantageChoice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdvantageChoice_descriptor_,
      AdvantageChoice::default_instance_,
      AdvantageChoice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantageChoice, _has_bits_[0]),
      -1,
      -1,
      sizeof(AdvantageChoice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvantageChoice, _internal_metadata_),
      -1);
  AdvantageChoice_Foul_descriptor_ = AdvantageChoice_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ssl_5fgame_5fcontroller_5fteam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TeamRegistration_descriptor_, &TeamRegistration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TeamToController_descriptor_, &TeamToController::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ControllerToTeam_descriptor_, &ControllerToTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdvantageChoice_descriptor_, &AdvantageChoice::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ssl_5fgame_5fcontroller_5fteam_2eproto() {
  delete TeamRegistration::default_instance_;
  delete TeamRegistration_reflection_;
  delete TeamToController::default_instance_;
  delete TeamToController_default_oneof_instance_;
  delete TeamToController_reflection_;
  delete ControllerToTeam::default_instance_;
  delete ControllerToTeam_default_oneof_instance_;
  delete ControllerToTeam_reflection_;
  delete AdvantageChoice::default_instance_;
  delete AdvantageChoice_reflection_;
}

void protobuf_AddDesc_ssl_5fgame_5fcontroller_5fteam_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ssl_5fgame_5fcontroller_5fteam_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_ssl_5fgame_5fevent_5f2019_2eproto();
  ::protobuf_AddDesc_ssl_5fgame_5fcontroller_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036ssl_game_controller_team.proto\032\031ssl_ga"
    "me_event_2019.proto\032 ssl_game_controller"
    "_common.proto\"D\n\020TeamRegistration\022\021\n\ttea"
    "m_name\030\001 \002(\t\022\035\n\tsignature\030\002 \001(\0132\n.Signat"
    "ure\"\377\001\n\020TeamToController\022\035\n\tsignature\030\001 "
    "\001(\0132\n.Signature\022\030\n\016desired_keeper\030\002 \001(\005H"
    "\000\022A\n\022advantage_response\030\003 \001(\0162#.TeamToCo"
    "ntroller.AdvantageResponseH\000\022\030\n\016substitu"
    "te_bot\030\004 \001(\010H\000\022\016\n\004ping\030\005 \001(\010H\000\">\n\021Advant"
    "ageResponse\022\010\n\004STOP\020\000\022\014\n\010CONTINUE\020\001\022\r\n\tU"
    "NDECIDED\020\000\032\002\020\001B\005\n\003msg\"u\n\020ControllerToTea"
    "m\022,\n\020controller_reply\030\001 \001(\0132\020.Controller"
    "ReplyH\000\022,\n\020advantage_choice\030\002 \001(\0132\020.Adva"
    "ntageChoiceH\000B\005\n\003msg\"\340\002\n\017AdvantageChoice"
    "\022#\n\004foul\030\001 \002(\0162\025.AdvantageChoice.Foul\0223\n"
    "\020bot_crash_unique\030\002 \001(\0132\031.GameEvent.BotC"
    "rashUnique\022/\n\016bot_pushed_bot\030\003 \001(\0132\027.Gam"
    "eEvent.BotPushedBot\022b\n)attacker_touched_"
    "opponent_in_defense_area\030\004 \001(\0132/.GameEve"
    "nt.AttackerTouchedOpponentInDefenseArea\""
    "^\n\004Foul\022\013\n\007UNKNOWN\020\000\022\r\n\tCOLLISION\020\001\022\013\n\007P"
    "USHING\020\002\022-\n)ATTACKER_TOUCHED_OPPONENT_IN"
    "_DEFENSE_AREA\020\003", 895);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssl_game_controller_team.proto", &protobuf_RegisterTypes);
  TeamRegistration::default_instance_ = new TeamRegistration();
  TeamToController::default_instance_ = new TeamToController();
  TeamToController_default_oneof_instance_ = new TeamToControllerOneofInstance();
  ControllerToTeam::default_instance_ = new ControllerToTeam();
  ControllerToTeam_default_oneof_instance_ = new ControllerToTeamOneofInstance();
  AdvantageChoice::default_instance_ = new AdvantageChoice();
  TeamRegistration::default_instance_->InitAsDefaultInstance();
  TeamToController::default_instance_->InitAsDefaultInstance();
  ControllerToTeam::default_instance_->InitAsDefaultInstance();
  AdvantageChoice::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ssl_5fgame_5fcontroller_5fteam_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ssl_5fgame_5fcontroller_5fteam_2eproto {
  StaticDescriptorInitializer_ssl_5fgame_5fcontroller_5fteam_2eproto() {
    protobuf_AddDesc_ssl_5fgame_5fcontroller_5fteam_2eproto();
  }
} static_descriptor_initializer_ssl_5fgame_5fcontroller_5fteam_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRegistration::kTeamNameFieldNumber;
const int TeamRegistration::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRegistration::TeamRegistration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRegistration)
}

void TeamRegistration::InitAsDefaultInstance() {
  signature_ = const_cast< ::Signature*>(&::Signature::default_instance());
}

TeamRegistration::TeamRegistration(const TeamRegistration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TeamRegistration)
}

void TeamRegistration::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRegistration::~TeamRegistration() {
  // @@protoc_insertion_point(destructor:TeamRegistration)
  SharedDtor();
}

void TeamRegistration::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete signature_;
  }
}

void TeamRegistration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRegistration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRegistration_descriptor_;
}

const TeamRegistration& TeamRegistration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fgame_5fcontroller_5fteam_2eproto();
  return *default_instance_;
}

TeamRegistration* TeamRegistration::default_instance_ = NULL;

TeamRegistration* TeamRegistration::New(::google::protobuf::Arena* arena) const {
  TeamRegistration* n = new TeamRegistration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRegistration::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRegistration)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_team_name()) {
      team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_signature()) {
      if (signature_ != NULL) signature_->::Signature::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TeamRegistration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRegistration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string team_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TeamRegistration.team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_signature;
        break;
      }

      // optional .Signature signature = 2;
      case 2: {
        if (tag == 18) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRegistration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRegistration)
  return false;
#undef DO_
}

void TeamRegistration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRegistration)
  // required string team_name = 1;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TeamRegistration.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->team_name(), output);
  }

  // optional .Signature signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->signature_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRegistration)
}

::google::protobuf::uint8* TeamRegistration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeamRegistration)
  // required string team_name = 1;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TeamRegistration.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->team_name(), target);
  }

  // optional .Signature signature = 2;
  if (has_signature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->signature_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRegistration)
  return target;
}

int TeamRegistration::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRegistration)
  int total_size = 0;

  // required string team_name = 1;
  if (has_team_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->team_name());
  }
  // optional .Signature signature = 2;
  if (has_signature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signature_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRegistration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRegistration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TeamRegistration* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRegistration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRegistration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRegistration)
    MergeFrom(*source);
  }
}

void TeamRegistration::MergeFrom(const TeamRegistration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRegistration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_name()) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (from.has_signature()) {
      mutable_signature()->::Signature::MergeFrom(from.signature());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TeamRegistration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRegistration::CopyFrom(const TeamRegistration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRegistration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_signature()) {
    if (!this->signature_->IsInitialized()) return false;
  }
  return true;
}

void TeamRegistration::Swap(TeamRegistration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRegistration::InternalSwap(TeamRegistration* other) {
  team_name_.Swap(&other->team_name_);
  std::swap(signature_, other->signature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRegistration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRegistration_descriptor_;
  metadata.reflection = TeamRegistration_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRegistration

// required string team_name = 1;
bool TeamRegistration::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRegistration::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRegistration::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRegistration::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
 const ::std::string& TeamRegistration::team_name() const {
  // @@protoc_insertion_point(field_get:TeamRegistration.team_name)
  return team_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TeamRegistration::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TeamRegistration.team_name)
}
 void TeamRegistration::set_team_name(const char* value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TeamRegistration.team_name)
}
 void TeamRegistration::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TeamRegistration.team_name)
}
 ::std::string* TeamRegistration::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:TeamRegistration.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TeamRegistration::release_team_name() {
  // @@protoc_insertion_point(field_release:TeamRegistration.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TeamRegistration::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:TeamRegistration.team_name)
}

// optional .Signature signature = 2;
bool TeamRegistration::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeamRegistration::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
void TeamRegistration::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeamRegistration::clear_signature() {
  if (signature_ != NULL) signature_->::Signature::Clear();
  clear_has_signature();
}
const ::Signature& TeamRegistration::signature() const {
  // @@protoc_insertion_point(field_get:TeamRegistration.signature)
  return signature_ != NULL ? *signature_ : *default_instance_->signature_;
}
::Signature* TeamRegistration::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    signature_ = new ::Signature;
  }
  // @@protoc_insertion_point(field_mutable:TeamRegistration.signature)
  return signature_;
}
::Signature* TeamRegistration::release_signature() {
  // @@protoc_insertion_point(field_release:TeamRegistration.signature)
  clear_has_signature();
  ::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
void TeamRegistration::set_allocated_signature(::Signature* signature) {
  delete signature_;
  signature_ = signature;
  if (signature) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  // @@protoc_insertion_point(field_set_allocated:TeamRegistration.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* TeamToController_AdvantageResponse_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamToController_AdvantageResponse_descriptor_;
}
bool TeamToController_AdvantageResponse_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TeamToController_AdvantageResponse TeamToController::STOP;
const TeamToController_AdvantageResponse TeamToController::CONTINUE;
const TeamToController_AdvantageResponse TeamToController::UNDECIDED;
const TeamToController_AdvantageResponse TeamToController::AdvantageResponse_MIN;
const TeamToController_AdvantageResponse TeamToController::AdvantageResponse_MAX;
const int TeamToController::AdvantageResponse_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamToController::kSignatureFieldNumber;
const int TeamToController::kDesiredKeeperFieldNumber;
const int TeamToController::kAdvantageResponseFieldNumber;
const int TeamToController::kSubstituteBotFieldNumber;
const int TeamToController::kPingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamToController::TeamToController()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamToController)
}

void TeamToController::InitAsDefaultInstance() {
  signature_ = const_cast< ::Signature*>(&::Signature::default_instance());
  TeamToController_default_oneof_instance_->desired_keeper_ = 0;
  TeamToController_default_oneof_instance_->advantage_response_ = 0;
  TeamToController_default_oneof_instance_->substitute_bot_ = false;
  TeamToController_default_oneof_instance_->ping_ = false;
}

TeamToController::TeamToController(const TeamToController& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TeamToController)
}

void TeamToController::SharedCtor() {
  _cached_size_ = 0;
  signature_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_msg();
}

TeamToController::~TeamToController() {
  // @@protoc_insertion_point(destructor:TeamToController)
  SharedDtor();
}

void TeamToController::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
  if (this != default_instance_) {
    delete signature_;
  }
}

void TeamToController::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamToController::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamToController_descriptor_;
}

const TeamToController& TeamToController::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fgame_5fcontroller_5fteam_2eproto();
  return *default_instance_;
}

TeamToController* TeamToController::default_instance_ = NULL;

TeamToController* TeamToController::New(::google::protobuf::Arena* arena) const {
  TeamToController* n = new TeamToController;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamToController::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:TeamToController)
  switch(msg_case()) {
    case kDesiredKeeper: {
      // No need to clear
      break;
    }
    case kAdvantageResponse: {
      // No need to clear
      break;
    }
    case kSubstituteBot: {
      // No need to clear
      break;
    }
    case kPing: {
      // No need to clear
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void TeamToController::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamToController)
  if (has_signature()) {
    if (signature_ != NULL) signature_->::Signature::Clear();
  }
  clear_msg();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TeamToController::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamToController)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Signature signature = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_desired_keeper;
        break;
      }

      // optional int32 desired_keeper = 2;
      case 2: {
        if (tag == 16) {
         parse_desired_keeper:
          clear_msg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_.desired_keeper_)));
          set_has_desired_keeper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_advantage_response;
        break;
      }

      // optional .TeamToController.AdvantageResponse advantage_response = 3;
      case 3: {
        if (tag == 24) {
         parse_advantage_response:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TeamToController_AdvantageResponse_IsValid(value)) {
            set_advantage_response(static_cast< ::TeamToController_AdvantageResponse >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_substitute_bot;
        break;
      }

      // optional bool substitute_bot = 4;
      case 4: {
        if (tag == 32) {
         parse_substitute_bot:
          clear_msg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &msg_.substitute_bot_)));
          set_has_substitute_bot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ping;
        break;
      }

      // optional bool ping = 5;
      case 5: {
        if (tag == 40) {
         parse_ping:
          clear_msg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &msg_.ping_)));
          set_has_ping();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamToController)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamToController)
  return false;
#undef DO_
}

void TeamToController::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamToController)
  // optional .Signature signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->signature_, output);
  }

  // optional int32 desired_keeper = 2;
  if (has_desired_keeper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->desired_keeper(), output);
  }

  // optional .TeamToController.AdvantageResponse advantage_response = 3;
  if (has_advantage_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->advantage_response(), output);
  }

  // optional bool substitute_bot = 4;
  if (has_substitute_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->substitute_bot(), output);
  }

  // optional bool ping = 5;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ping(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamToController)
}

::google::protobuf::uint8* TeamToController::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeamToController)
  // optional .Signature signature = 1;
  if (has_signature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->signature_, false, target);
  }

  // optional int32 desired_keeper = 2;
  if (has_desired_keeper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->desired_keeper(), target);
  }

  // optional .TeamToController.AdvantageResponse advantage_response = 3;
  if (has_advantage_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->advantage_response(), target);
  }

  // optional bool substitute_bot = 4;
  if (has_substitute_bot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->substitute_bot(), target);
  }

  // optional bool ping = 5;
  if (has_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ping(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamToController)
  return target;
}

int TeamToController::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:TeamToController)
  int total_size = 0;

  // optional .Signature signature = 1;
  if (has_signature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signature_);
  }

  switch (msg_case()) {
    // optional int32 desired_keeper = 2;
    case kDesiredKeeper: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desired_keeper());
      break;
    }
    // optional .TeamToController.AdvantageResponse advantage_response = 3;
    case kAdvantageResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->advantage_response());
      break;
    }
    // optional bool substitute_bot = 4;
    case kSubstituteBot: {
      total_size += 1 + 1;
      break;
    }
    // optional bool ping = 5;
    case kPing: {
      total_size += 1 + 1;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamToController::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamToController)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TeamToController* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamToController>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamToController)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamToController)
    MergeFrom(*source);
  }
}

void TeamToController::MergeFrom(const TeamToController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamToController)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.msg_case()) {
    case kDesiredKeeper: {
      set_desired_keeper(from.desired_keeper());
      break;
    }
    case kAdvantageResponse: {
      set_advantage_response(from.advantage_response());
      break;
    }
    case kSubstituteBot: {
      set_substitute_bot(from.substitute_bot());
      break;
    }
    case kPing: {
      set_ping(from.ping());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signature()) {
      mutable_signature()->::Signature::MergeFrom(from.signature());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TeamToController::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamToController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamToController::CopyFrom(const TeamToController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamToController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamToController::IsInitialized() const {

  if (has_signature()) {
    if (!this->signature_->IsInitialized()) return false;
  }
  return true;
}

void TeamToController::Swap(TeamToController* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamToController::InternalSwap(TeamToController* other) {
  std::swap(signature_, other->signature_);
  std::swap(msg_, other->msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamToController::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamToController_descriptor_;
  metadata.reflection = TeamToController_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamToController

// optional .Signature signature = 1;
bool TeamToController::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamToController::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamToController::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamToController::clear_signature() {
  if (signature_ != NULL) signature_->::Signature::Clear();
  clear_has_signature();
}
const ::Signature& TeamToController::signature() const {
  // @@protoc_insertion_point(field_get:TeamToController.signature)
  return signature_ != NULL ? *signature_ : *default_instance_->signature_;
}
::Signature* TeamToController::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    signature_ = new ::Signature;
  }
  // @@protoc_insertion_point(field_mutable:TeamToController.signature)
  return signature_;
}
::Signature* TeamToController::release_signature() {
  // @@protoc_insertion_point(field_release:TeamToController.signature)
  clear_has_signature();
  ::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
void TeamToController::set_allocated_signature(::Signature* signature) {
  delete signature_;
  signature_ = signature;
  if (signature) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  // @@protoc_insertion_point(field_set_allocated:TeamToController.signature)
}

// optional int32 desired_keeper = 2;
bool TeamToController::has_desired_keeper() const {
  return msg_case() == kDesiredKeeper;
}
void TeamToController::set_has_desired_keeper() {
  _oneof_case_[0] = kDesiredKeeper;
}
void TeamToController::clear_desired_keeper() {
  if (has_desired_keeper()) {
    msg_.desired_keeper_ = 0;
    clear_has_msg();
  }
}
 ::google::protobuf::int32 TeamToController::desired_keeper() const {
  // @@protoc_insertion_point(field_get:TeamToController.desired_keeper)
  if (has_desired_keeper()) {
    return msg_.desired_keeper_;
  }
  return 0;
}
 void TeamToController::set_desired_keeper(::google::protobuf::int32 value) {
  if (!has_desired_keeper()) {
    clear_msg();
    set_has_desired_keeper();
  }
  msg_.desired_keeper_ = value;
  // @@protoc_insertion_point(field_set:TeamToController.desired_keeper)
}

// optional .TeamToController.AdvantageResponse advantage_response = 3;
bool TeamToController::has_advantage_response() const {
  return msg_case() == kAdvantageResponse;
}
void TeamToController::set_has_advantage_response() {
  _oneof_case_[0] = kAdvantageResponse;
}
void TeamToController::clear_advantage_response() {
  if (has_advantage_response()) {
    msg_.advantage_response_ = 0;
    clear_has_msg();
  }
}
 ::TeamToController_AdvantageResponse TeamToController::advantage_response() const {
  // @@protoc_insertion_point(field_get:TeamToController.advantage_response)
  if (has_advantage_response()) {
    return static_cast< ::TeamToController_AdvantageResponse >(msg_.advantage_response_);
  }
  return static_cast< ::TeamToController_AdvantageResponse >(0);
}
 void TeamToController::set_advantage_response(::TeamToController_AdvantageResponse value) {
  assert(::TeamToController_AdvantageResponse_IsValid(value));
  if (!has_advantage_response()) {
    clear_msg();
    set_has_advantage_response();
  }
  msg_.advantage_response_ = value;
  // @@protoc_insertion_point(field_set:TeamToController.advantage_response)
}

// optional bool substitute_bot = 4;
bool TeamToController::has_substitute_bot() const {
  return msg_case() == kSubstituteBot;
}
void TeamToController::set_has_substitute_bot() {
  _oneof_case_[0] = kSubstituteBot;
}
void TeamToController::clear_substitute_bot() {
  if (has_substitute_bot()) {
    msg_.substitute_bot_ = false;
    clear_has_msg();
  }
}
 bool TeamToController::substitute_bot() const {
  // @@protoc_insertion_point(field_get:TeamToController.substitute_bot)
  if (has_substitute_bot()) {
    return msg_.substitute_bot_;
  }
  return false;
}
 void TeamToController::set_substitute_bot(bool value) {
  if (!has_substitute_bot()) {
    clear_msg();
    set_has_substitute_bot();
  }
  msg_.substitute_bot_ = value;
  // @@protoc_insertion_point(field_set:TeamToController.substitute_bot)
}

// optional bool ping = 5;
bool TeamToController::has_ping() const {
  return msg_case() == kPing;
}
void TeamToController::set_has_ping() {
  _oneof_case_[0] = kPing;
}
void TeamToController::clear_ping() {
  if (has_ping()) {
    msg_.ping_ = false;
    clear_has_msg();
  }
}
 bool TeamToController::ping() const {
  // @@protoc_insertion_point(field_get:TeamToController.ping)
  if (has_ping()) {
    return msg_.ping_;
  }
  return false;
}
 void TeamToController::set_ping(bool value) {
  if (!has_ping()) {
    clear_msg();
    set_has_ping();
  }
  msg_.ping_ = value;
  // @@protoc_insertion_point(field_set:TeamToController.ping)
}

bool TeamToController::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void TeamToController::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
TeamToController::MsgCase TeamToController::msg_case() const {
  return TeamToController::MsgCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerToTeam::kControllerReplyFieldNumber;
const int ControllerToTeam::kAdvantageChoiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerToTeam::ControllerToTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ControllerToTeam)
}

void ControllerToTeam::InitAsDefaultInstance() {
  ControllerToTeam_default_oneof_instance_->controller_reply_ = const_cast< ::ControllerReply*>(&::ControllerReply::default_instance());
  ControllerToTeam_default_oneof_instance_->advantage_choice_ = const_cast< ::AdvantageChoice*>(&::AdvantageChoice::default_instance());
}

ControllerToTeam::ControllerToTeam(const ControllerToTeam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ControllerToTeam)
}

void ControllerToTeam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_msg();
}

ControllerToTeam::~ControllerToTeam() {
  // @@protoc_insertion_point(destructor:ControllerToTeam)
  SharedDtor();
}

void ControllerToTeam::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
  if (this != default_instance_) {
  }
}

void ControllerToTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControllerToTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControllerToTeam_descriptor_;
}

const ControllerToTeam& ControllerToTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fgame_5fcontroller_5fteam_2eproto();
  return *default_instance_;
}

ControllerToTeam* ControllerToTeam::default_instance_ = NULL;

ControllerToTeam* ControllerToTeam::New(::google::protobuf::Arena* arena) const {
  ControllerToTeam* n = new ControllerToTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControllerToTeam::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:ControllerToTeam)
  switch(msg_case()) {
    case kControllerReply: {
      delete msg_.controller_reply_;
      break;
    }
    case kAdvantageChoice: {
      delete msg_.advantage_choice_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void ControllerToTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:ControllerToTeam)
  clear_msg();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ControllerToTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ControllerToTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ControllerReply controller_reply = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_controller_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_advantage_choice;
        break;
      }

      // optional .AdvantageChoice advantage_choice = 2;
      case 2: {
        if (tag == 18) {
         parse_advantage_choice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_advantage_choice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ControllerToTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ControllerToTeam)
  return false;
#undef DO_
}

void ControllerToTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ControllerToTeam)
  // optional .ControllerReply controller_reply = 1;
  if (has_controller_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *msg_.controller_reply_, output);
  }

  // optional .AdvantageChoice advantage_choice = 2;
  if (has_advantage_choice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *msg_.advantage_choice_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ControllerToTeam)
}

::google::protobuf::uint8* ControllerToTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControllerToTeam)
  // optional .ControllerReply controller_reply = 1;
  if (has_controller_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *msg_.controller_reply_, false, target);
  }

  // optional .AdvantageChoice advantage_choice = 2;
  if (has_advantage_choice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *msg_.advantage_choice_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControllerToTeam)
  return target;
}

int ControllerToTeam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ControllerToTeam)
  int total_size = 0;

  switch (msg_case()) {
    // optional .ControllerReply controller_reply = 1;
    case kControllerReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.controller_reply_);
      break;
    }
    // optional .AdvantageChoice advantage_choice = 2;
    case kAdvantageChoice: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.advantage_choice_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControllerToTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ControllerToTeam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ControllerToTeam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerToTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ControllerToTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ControllerToTeam)
    MergeFrom(*source);
  }
}

void ControllerToTeam::MergeFrom(const ControllerToTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControllerToTeam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.msg_case()) {
    case kControllerReply: {
      mutable_controller_reply()->::ControllerReply::MergeFrom(from.controller_reply());
      break;
    }
    case kAdvantageChoice: {
      mutable_advantage_choice()->::AdvantageChoice::MergeFrom(from.advantage_choice());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ControllerToTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ControllerToTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerToTeam::CopyFrom(const ControllerToTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControllerToTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerToTeam::IsInitialized() const {

  if (has_advantage_choice()) {
    if (!this->advantage_choice().IsInitialized()) return false;
  }
  return true;
}

void ControllerToTeam::Swap(ControllerToTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerToTeam::InternalSwap(ControllerToTeam* other) {
  std::swap(msg_, other->msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControllerToTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControllerToTeam_descriptor_;
  metadata.reflection = ControllerToTeam_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ControllerToTeam

// optional .ControllerReply controller_reply = 1;
bool ControllerToTeam::has_controller_reply() const {
  return msg_case() == kControllerReply;
}
void ControllerToTeam::set_has_controller_reply() {
  _oneof_case_[0] = kControllerReply;
}
void ControllerToTeam::clear_controller_reply() {
  if (has_controller_reply()) {
    delete msg_.controller_reply_;
    clear_has_msg();
  }
}
 const ::ControllerReply& ControllerToTeam::controller_reply() const {
  // @@protoc_insertion_point(field_get:ControllerToTeam.controller_reply)
  return has_controller_reply()
      ? *msg_.controller_reply_
      : ::ControllerReply::default_instance();
}
::ControllerReply* ControllerToTeam::mutable_controller_reply() {
  if (!has_controller_reply()) {
    clear_msg();
    set_has_controller_reply();
    msg_.controller_reply_ = new ::ControllerReply;
  }
  // @@protoc_insertion_point(field_mutable:ControllerToTeam.controller_reply)
  return msg_.controller_reply_;
}
::ControllerReply* ControllerToTeam::release_controller_reply() {
  // @@protoc_insertion_point(field_release:ControllerToTeam.controller_reply)
  if (has_controller_reply()) {
    clear_has_msg();
    ::ControllerReply* temp = msg_.controller_reply_;
    msg_.controller_reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ControllerToTeam::set_allocated_controller_reply(::ControllerReply* controller_reply) {
  clear_msg();
  if (controller_reply) {
    set_has_controller_reply();
    msg_.controller_reply_ = controller_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:ControllerToTeam.controller_reply)
}

// optional .AdvantageChoice advantage_choice = 2;
bool ControllerToTeam::has_advantage_choice() const {
  return msg_case() == kAdvantageChoice;
}
void ControllerToTeam::set_has_advantage_choice() {
  _oneof_case_[0] = kAdvantageChoice;
}
void ControllerToTeam::clear_advantage_choice() {
  if (has_advantage_choice()) {
    delete msg_.advantage_choice_;
    clear_has_msg();
  }
}
 const ::AdvantageChoice& ControllerToTeam::advantage_choice() const {
  // @@protoc_insertion_point(field_get:ControllerToTeam.advantage_choice)
  return has_advantage_choice()
      ? *msg_.advantage_choice_
      : ::AdvantageChoice::default_instance();
}
::AdvantageChoice* ControllerToTeam::mutable_advantage_choice() {
  if (!has_advantage_choice()) {
    clear_msg();
    set_has_advantage_choice();
    msg_.advantage_choice_ = new ::AdvantageChoice;
  }
  // @@protoc_insertion_point(field_mutable:ControllerToTeam.advantage_choice)
  return msg_.advantage_choice_;
}
::AdvantageChoice* ControllerToTeam::release_advantage_choice() {
  // @@protoc_insertion_point(field_release:ControllerToTeam.advantage_choice)
  if (has_advantage_choice()) {
    clear_has_msg();
    ::AdvantageChoice* temp = msg_.advantage_choice_;
    msg_.advantage_choice_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ControllerToTeam::set_allocated_advantage_choice(::AdvantageChoice* advantage_choice) {
  clear_msg();
  if (advantage_choice) {
    set_has_advantage_choice();
    msg_.advantage_choice_ = advantage_choice;
  }
  // @@protoc_insertion_point(field_set_allocated:ControllerToTeam.advantage_choice)
}

bool ControllerToTeam::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void ControllerToTeam::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
ControllerToTeam::MsgCase ControllerToTeam::msg_case() const {
  return ControllerToTeam::MsgCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* AdvantageChoice_Foul_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvantageChoice_Foul_descriptor_;
}
bool AdvantageChoice_Foul_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AdvantageChoice_Foul AdvantageChoice::UNKNOWN;
const AdvantageChoice_Foul AdvantageChoice::COLLISION;
const AdvantageChoice_Foul AdvantageChoice::PUSHING;
const AdvantageChoice_Foul AdvantageChoice::ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA;
const AdvantageChoice_Foul AdvantageChoice::Foul_MIN;
const AdvantageChoice_Foul AdvantageChoice::Foul_MAX;
const int AdvantageChoice::Foul_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdvantageChoice::kFoulFieldNumber;
const int AdvantageChoice::kBotCrashUniqueFieldNumber;
const int AdvantageChoice::kBotPushedBotFieldNumber;
const int AdvantageChoice::kAttackerTouchedOpponentInDefenseAreaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdvantageChoice::AdvantageChoice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AdvantageChoice)
}

void AdvantageChoice::InitAsDefaultInstance() {
  bot_crash_unique_ = const_cast< ::GameEvent_BotCrashUnique*>(&::GameEvent_BotCrashUnique::default_instance());
  bot_pushed_bot_ = const_cast< ::GameEvent_BotPushedBot*>(&::GameEvent_BotPushedBot::default_instance());
  attacker_touched_opponent_in_defense_area_ = const_cast< ::GameEvent_AttackerTouchedOpponentInDefenseArea*>(&::GameEvent_AttackerTouchedOpponentInDefenseArea::default_instance());
}

AdvantageChoice::AdvantageChoice(const AdvantageChoice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AdvantageChoice)
}

void AdvantageChoice::SharedCtor() {
  _cached_size_ = 0;
  foul_ = 0;
  bot_crash_unique_ = NULL;
  bot_pushed_bot_ = NULL;
  attacker_touched_opponent_in_defense_area_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdvantageChoice::~AdvantageChoice() {
  // @@protoc_insertion_point(destructor:AdvantageChoice)
  SharedDtor();
}

void AdvantageChoice::SharedDtor() {
  if (this != default_instance_) {
    delete bot_crash_unique_;
    delete bot_pushed_bot_;
    delete attacker_touched_opponent_in_defense_area_;
  }
}

void AdvantageChoice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvantageChoice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvantageChoice_descriptor_;
}

const AdvantageChoice& AdvantageChoice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fgame_5fcontroller_5fteam_2eproto();
  return *default_instance_;
}

AdvantageChoice* AdvantageChoice::default_instance_ = NULL;

AdvantageChoice* AdvantageChoice::New(::google::protobuf::Arena* arena) const {
  AdvantageChoice* n = new AdvantageChoice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdvantageChoice::Clear() {
// @@protoc_insertion_point(message_clear_start:AdvantageChoice)
  if (_has_bits_[0 / 32] & 15u) {
    foul_ = 0;
    if (has_bot_crash_unique()) {
      if (bot_crash_unique_ != NULL) bot_crash_unique_->::GameEvent_BotCrashUnique::Clear();
    }
    if (has_bot_pushed_bot()) {
      if (bot_pushed_bot_ != NULL) bot_pushed_bot_->::GameEvent_BotPushedBot::Clear();
    }
    if (has_attacker_touched_opponent_in_defense_area()) {
      if (attacker_touched_opponent_in_defense_area_ != NULL) attacker_touched_opponent_in_defense_area_->::GameEvent_AttackerTouchedOpponentInDefenseArea::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AdvantageChoice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AdvantageChoice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AdvantageChoice.Foul foul = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AdvantageChoice_Foul_IsValid(value)) {
            set_foul(static_cast< ::AdvantageChoice_Foul >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bot_crash_unique;
        break;
      }

      // optional .GameEvent.BotCrashUnique bot_crash_unique = 2;
      case 2: {
        if (tag == 18) {
         parse_bot_crash_unique:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bot_crash_unique()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bot_pushed_bot;
        break;
      }

      // optional .GameEvent.BotPushedBot bot_pushed_bot = 3;
      case 3: {
        if (tag == 26) {
         parse_bot_pushed_bot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bot_pushed_bot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attacker_touched_opponent_in_defense_area;
        break;
      }

      // optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 4;
      case 4: {
        if (tag == 34) {
         parse_attacker_touched_opponent_in_defense_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attacker_touched_opponent_in_defense_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AdvantageChoice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AdvantageChoice)
  return false;
#undef DO_
}

void AdvantageChoice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AdvantageChoice)
  // required .AdvantageChoice.Foul foul = 1;
  if (has_foul()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->foul(), output);
  }

  // optional .GameEvent.BotCrashUnique bot_crash_unique = 2;
  if (has_bot_crash_unique()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->bot_crash_unique_, output);
  }

  // optional .GameEvent.BotPushedBot bot_pushed_bot = 3;
  if (has_bot_pushed_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->bot_pushed_bot_, output);
  }

  // optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 4;
  if (has_attacker_touched_opponent_in_defense_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->attacker_touched_opponent_in_defense_area_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AdvantageChoice)
}

::google::protobuf::uint8* AdvantageChoice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AdvantageChoice)
  // required .AdvantageChoice.Foul foul = 1;
  if (has_foul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->foul(), target);
  }

  // optional .GameEvent.BotCrashUnique bot_crash_unique = 2;
  if (has_bot_crash_unique()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->bot_crash_unique_, false, target);
  }

  // optional .GameEvent.BotPushedBot bot_pushed_bot = 3;
  if (has_bot_pushed_bot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->bot_pushed_bot_, false, target);
  }

  // optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 4;
  if (has_attacker_touched_opponent_in_defense_area()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->attacker_touched_opponent_in_defense_area_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AdvantageChoice)
  return target;
}

int AdvantageChoice::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AdvantageChoice)
  int total_size = 0;

  // required .AdvantageChoice.Foul foul = 1;
  if (has_foul()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->foul());
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional .GameEvent.BotCrashUnique bot_crash_unique = 2;
    if (has_bot_crash_unique()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bot_crash_unique_);
    }

    // optional .GameEvent.BotPushedBot bot_pushed_bot = 3;
    if (has_bot_pushed_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bot_pushed_bot_);
    }

    // optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 4;
    if (has_attacker_touched_opponent_in_defense_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->attacker_touched_opponent_in_defense_area_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdvantageChoice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AdvantageChoice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AdvantageChoice* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AdvantageChoice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AdvantageChoice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AdvantageChoice)
    MergeFrom(*source);
  }
}

void AdvantageChoice::MergeFrom(const AdvantageChoice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AdvantageChoice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_foul()) {
      set_foul(from.foul());
    }
    if (from.has_bot_crash_unique()) {
      mutable_bot_crash_unique()->::GameEvent_BotCrashUnique::MergeFrom(from.bot_crash_unique());
    }
    if (from.has_bot_pushed_bot()) {
      mutable_bot_pushed_bot()->::GameEvent_BotPushedBot::MergeFrom(from.bot_pushed_bot());
    }
    if (from.has_attacker_touched_opponent_in_defense_area()) {
      mutable_attacker_touched_opponent_in_defense_area()->::GameEvent_AttackerTouchedOpponentInDefenseArea::MergeFrom(from.attacker_touched_opponent_in_defense_area());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AdvantageChoice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AdvantageChoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvantageChoice::CopyFrom(const AdvantageChoice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdvantageChoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvantageChoice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_bot_crash_unique()) {
    if (!this->bot_crash_unique_->IsInitialized()) return false;
  }
  if (has_bot_pushed_bot()) {
    if (!this->bot_pushed_bot_->IsInitialized()) return false;
  }
  if (has_attacker_touched_opponent_in_defense_area()) {
    if (!this->attacker_touched_opponent_in_defense_area_->IsInitialized()) return false;
  }
  return true;
}

void AdvantageChoice::Swap(AdvantageChoice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdvantageChoice::InternalSwap(AdvantageChoice* other) {
  std::swap(foul_, other->foul_);
  std::swap(bot_crash_unique_, other->bot_crash_unique_);
  std::swap(bot_pushed_bot_, other->bot_pushed_bot_);
  std::swap(attacker_touched_opponent_in_defense_area_, other->attacker_touched_opponent_in_defense_area_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdvantageChoice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvantageChoice_descriptor_;
  metadata.reflection = AdvantageChoice_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdvantageChoice

// required .AdvantageChoice.Foul foul = 1;
bool AdvantageChoice::has_foul() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AdvantageChoice::set_has_foul() {
  _has_bits_[0] |= 0x00000001u;
}
void AdvantageChoice::clear_has_foul() {
  _has_bits_[0] &= ~0x00000001u;
}
void AdvantageChoice::clear_foul() {
  foul_ = 0;
  clear_has_foul();
}
 ::AdvantageChoice_Foul AdvantageChoice::foul() const {
  // @@protoc_insertion_point(field_get:AdvantageChoice.foul)
  return static_cast< ::AdvantageChoice_Foul >(foul_);
}
 void AdvantageChoice::set_foul(::AdvantageChoice_Foul value) {
  assert(::AdvantageChoice_Foul_IsValid(value));
  set_has_foul();
  foul_ = value;
  // @@protoc_insertion_point(field_set:AdvantageChoice.foul)
}

// optional .GameEvent.BotCrashUnique bot_crash_unique = 2;
bool AdvantageChoice::has_bot_crash_unique() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AdvantageChoice::set_has_bot_crash_unique() {
  _has_bits_[0] |= 0x00000002u;
}
void AdvantageChoice::clear_has_bot_crash_unique() {
  _has_bits_[0] &= ~0x00000002u;
}
void AdvantageChoice::clear_bot_crash_unique() {
  if (bot_crash_unique_ != NULL) bot_crash_unique_->::GameEvent_BotCrashUnique::Clear();
  clear_has_bot_crash_unique();
}
const ::GameEvent_BotCrashUnique& AdvantageChoice::bot_crash_unique() const {
  // @@protoc_insertion_point(field_get:AdvantageChoice.bot_crash_unique)
  return bot_crash_unique_ != NULL ? *bot_crash_unique_ : *default_instance_->bot_crash_unique_;
}
::GameEvent_BotCrashUnique* AdvantageChoice::mutable_bot_crash_unique() {
  set_has_bot_crash_unique();
  if (bot_crash_unique_ == NULL) {
    bot_crash_unique_ = new ::GameEvent_BotCrashUnique;
  }
  // @@protoc_insertion_point(field_mutable:AdvantageChoice.bot_crash_unique)
  return bot_crash_unique_;
}
::GameEvent_BotCrashUnique* AdvantageChoice::release_bot_crash_unique() {
  // @@protoc_insertion_point(field_release:AdvantageChoice.bot_crash_unique)
  clear_has_bot_crash_unique();
  ::GameEvent_BotCrashUnique* temp = bot_crash_unique_;
  bot_crash_unique_ = NULL;
  return temp;
}
void AdvantageChoice::set_allocated_bot_crash_unique(::GameEvent_BotCrashUnique* bot_crash_unique) {
  delete bot_crash_unique_;
  bot_crash_unique_ = bot_crash_unique;
  if (bot_crash_unique) {
    set_has_bot_crash_unique();
  } else {
    clear_has_bot_crash_unique();
  }
  // @@protoc_insertion_point(field_set_allocated:AdvantageChoice.bot_crash_unique)
}

// optional .GameEvent.BotPushedBot bot_pushed_bot = 3;
bool AdvantageChoice::has_bot_pushed_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AdvantageChoice::set_has_bot_pushed_bot() {
  _has_bits_[0] |= 0x00000004u;
}
void AdvantageChoice::clear_has_bot_pushed_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
void AdvantageChoice::clear_bot_pushed_bot() {
  if (bot_pushed_bot_ != NULL) bot_pushed_bot_->::GameEvent_BotPushedBot::Clear();
  clear_has_bot_pushed_bot();
}
const ::GameEvent_BotPushedBot& AdvantageChoice::bot_pushed_bot() const {
  // @@protoc_insertion_point(field_get:AdvantageChoice.bot_pushed_bot)
  return bot_pushed_bot_ != NULL ? *bot_pushed_bot_ : *default_instance_->bot_pushed_bot_;
}
::GameEvent_BotPushedBot* AdvantageChoice::mutable_bot_pushed_bot() {
  set_has_bot_pushed_bot();
  if (bot_pushed_bot_ == NULL) {
    bot_pushed_bot_ = new ::GameEvent_BotPushedBot;
  }
  // @@protoc_insertion_point(field_mutable:AdvantageChoice.bot_pushed_bot)
  return bot_pushed_bot_;
}
::GameEvent_BotPushedBot* AdvantageChoice::release_bot_pushed_bot() {
  // @@protoc_insertion_point(field_release:AdvantageChoice.bot_pushed_bot)
  clear_has_bot_pushed_bot();
  ::GameEvent_BotPushedBot* temp = bot_pushed_bot_;
  bot_pushed_bot_ = NULL;
  return temp;
}
void AdvantageChoice::set_allocated_bot_pushed_bot(::GameEvent_BotPushedBot* bot_pushed_bot) {
  delete bot_pushed_bot_;
  bot_pushed_bot_ = bot_pushed_bot;
  if (bot_pushed_bot) {
    set_has_bot_pushed_bot();
  } else {
    clear_has_bot_pushed_bot();
  }
  // @@protoc_insertion_point(field_set_allocated:AdvantageChoice.bot_pushed_bot)
}

// optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 4;
bool AdvantageChoice::has_attacker_touched_opponent_in_defense_area() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AdvantageChoice::set_has_attacker_touched_opponent_in_defense_area() {
  _has_bits_[0] |= 0x00000008u;
}
void AdvantageChoice::clear_has_attacker_touched_opponent_in_defense_area() {
  _has_bits_[0] &= ~0x00000008u;
}
void AdvantageChoice::clear_attacker_touched_opponent_in_defense_area() {
  if (attacker_touched_opponent_in_defense_area_ != NULL) attacker_touched_opponent_in_defense_area_->::GameEvent_AttackerTouchedOpponentInDefenseArea::Clear();
  clear_has_attacker_touched_opponent_in_defense_area();
}
const ::GameEvent_AttackerTouchedOpponentInDefenseArea& AdvantageChoice::attacker_touched_opponent_in_defense_area() const {
  // @@protoc_insertion_point(field_get:AdvantageChoice.attacker_touched_opponent_in_defense_area)
  return attacker_touched_opponent_in_defense_area_ != NULL ? *attacker_touched_opponent_in_defense_area_ : *default_instance_->attacker_touched_opponent_in_defense_area_;
}
::GameEvent_AttackerTouchedOpponentInDefenseArea* AdvantageChoice::mutable_attacker_touched_opponent_in_defense_area() {
  set_has_attacker_touched_opponent_in_defense_area();
  if (attacker_touched_opponent_in_defense_area_ == NULL) {
    attacker_touched_opponent_in_defense_area_ = new ::GameEvent_AttackerTouchedOpponentInDefenseArea;
  }
  // @@protoc_insertion_point(field_mutable:AdvantageChoice.attacker_touched_opponent_in_defense_area)
  return attacker_touched_opponent_in_defense_area_;
}
::GameEvent_AttackerTouchedOpponentInDefenseArea* AdvantageChoice::release_attacker_touched_opponent_in_defense_area() {
  // @@protoc_insertion_point(field_release:AdvantageChoice.attacker_touched_opponent_in_defense_area)
  clear_has_attacker_touched_opponent_in_defense_area();
  ::GameEvent_AttackerTouchedOpponentInDefenseArea* temp = attacker_touched_opponent_in_defense_area_;
  attacker_touched_opponent_in_defense_area_ = NULL;
  return temp;
}
void AdvantageChoice::set_allocated_attacker_touched_opponent_in_defense_area(::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area) {
  delete attacker_touched_opponent_in_defense_area_;
  attacker_touched_opponent_in_defense_area_ = attacker_touched_opponent_in_defense_area;
  if (attacker_touched_opponent_in_defense_area) {
    set_has_attacker_touched_opponent_in_defense_area();
  } else {
    clear_has_attacker_touched_opponent_in_defense_area();
  }
  // @@protoc_insertion_point(field_set_allocated:AdvantageChoice.attacker_touched_opponent_in_defense_area)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
