// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_game_controller_auto_ref.proto

#ifndef PROTOBUF_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto__INCLUDED
#define PROTOBUF_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ssl_game_controller_common.pb.h"
#include "ssl_game_event_2019.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto();
void protobuf_AssignDesc_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto();
void protobuf_ShutdownFile_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto();

class AutoRefMessage;
class AutoRefMessage_WaitForBots;
class AutoRefMessage_WaitForBots_Violator;
class AutoRefRegistration;
class AutoRefToController;
class ControllerToAutoRef;

// ===================================================================

class AutoRefRegistration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AutoRefRegistration) */ {
 public:
  AutoRefRegistration();
  virtual ~AutoRefRegistration();

  AutoRefRegistration(const AutoRefRegistration& from);

  inline AutoRefRegistration& operator=(const AutoRefRegistration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AutoRefRegistration& default_instance();

  void Swap(AutoRefRegistration* other);

  // implements Message ----------------------------------------------

  inline AutoRefRegistration* New() const { return New(NULL); }

  AutoRefRegistration* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AutoRefRegistration& from);
  void MergeFrom(const AutoRefRegistration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutoRefRegistration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string identifier = 1;
  bool has_identifier() const;
  void clear_identifier();
  static const int kIdentifierFieldNumber = 1;
  const ::std::string& identifier() const;
  void set_identifier(const ::std::string& value);
  void set_identifier(const char* value);
  void set_identifier(const char* value, size_t size);
  ::std::string* mutable_identifier();
  ::std::string* release_identifier();
  void set_allocated_identifier(::std::string* identifier);

  // optional .Signature signature = 2;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 2;
  const ::Signature& signature() const;
  ::Signature* mutable_signature();
  ::Signature* release_signature();
  void set_allocated_signature(::Signature* signature);

  // @@protoc_insertion_point(class_scope:AutoRefRegistration)
 private:
  inline void set_has_identifier();
  inline void clear_has_identifier();
  inline void set_has_signature();
  inline void clear_has_signature();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr identifier_;
  ::Signature* signature_;
  friend void  protobuf_AddDesc_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto();
  friend void protobuf_AssignDesc_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto();
  friend void protobuf_ShutdownFile_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto();

  void InitAsDefaultInstance();
  static AutoRefRegistration* default_instance_;
};
// -------------------------------------------------------------------

class AutoRefToController : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AutoRefToController) */ {
 public:
  AutoRefToController();
  virtual ~AutoRefToController();

  AutoRefToController(const AutoRefToController& from);

  inline AutoRefToController& operator=(const AutoRefToController& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AutoRefToController& default_instance();

  void Swap(AutoRefToController* other);

  // implements Message ----------------------------------------------

  inline AutoRefToController* New() const { return New(NULL); }

  AutoRefToController* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AutoRefToController& from);
  void MergeFrom(const AutoRefToController& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutoRefToController* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Signature signature = 1;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::Signature& signature() const;
  ::Signature* mutable_signature();
  ::Signature* release_signature();
  void set_allocated_signature(::Signature* signature);

  // optional .GameEvent game_event = 2;
  bool has_game_event() const;
  void clear_game_event();
  static const int kGameEventFieldNumber = 2;
  const ::GameEvent& game_event() const;
  ::GameEvent* mutable_game_event();
  ::GameEvent* release_game_event();
  void set_allocated_game_event(::GameEvent* game_event);

  // optional .AutoRefMessage auto_ref_message = 3 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_auto_ref_message() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_auto_ref_message();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kAutoRefMessageFieldNumber = 3;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::AutoRefMessage& auto_ref_message() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::AutoRefMessage* mutable_auto_ref_message();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::AutoRefMessage* release_auto_ref_message();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_auto_ref_message(::AutoRefMessage* auto_ref_message);

  // @@protoc_insertion_point(class_scope:AutoRefToController)
 private:
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_game_event();
  inline void clear_has_game_event();
  inline void set_has_auto_ref_message();
  inline void clear_has_auto_ref_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Signature* signature_;
  ::GameEvent* game_event_;
  ::AutoRefMessage* auto_ref_message_;
  friend void  protobuf_AddDesc_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto();
  friend void protobuf_AssignDesc_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto();
  friend void protobuf_ShutdownFile_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto();

  void InitAsDefaultInstance();
  static AutoRefToController* default_instance_;
};
// -------------------------------------------------------------------

class ControllerToAutoRef : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ControllerToAutoRef) */ {
 public:
  ControllerToAutoRef();
  virtual ~ControllerToAutoRef();

  ControllerToAutoRef(const ControllerToAutoRef& from);

  inline ControllerToAutoRef& operator=(const ControllerToAutoRef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerToAutoRef& default_instance();

  enum MsgCase {
    kControllerReply = 1,
    MSG_NOT_SET = 0,
  };

  void Swap(ControllerToAutoRef* other);

  // implements Message ----------------------------------------------

  inline ControllerToAutoRef* New() const { return New(NULL); }

  ControllerToAutoRef* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ControllerToAutoRef& from);
  void MergeFrom(const ControllerToAutoRef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ControllerToAutoRef* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ControllerReply controller_reply = 1;
  bool has_controller_reply() const;
  void clear_controller_reply();
  static const int kControllerReplyFieldNumber = 1;
  const ::ControllerReply& controller_reply() const;
  ::ControllerReply* mutable_controller_reply();
  ::ControllerReply* release_controller_reply();
  void set_allocated_controller_reply(::ControllerReply* controller_reply);

  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:ControllerToAutoRef)
 private:
  inline void set_has_controller_reply();

  inline bool has_msg() const;
  void clear_msg();
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union MsgUnion {
    MsgUnion() {}
    ::ControllerReply* controller_reply_;
  } msg_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto();
  friend void protobuf_AssignDesc_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto();
  friend void protobuf_ShutdownFile_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto();

  void InitAsDefaultInstance();
  static ControllerToAutoRef* default_instance_;
};
// -------------------------------------------------------------------

class AutoRefMessage_WaitForBots_Violator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AutoRefMessage.WaitForBots.Violator) */ {
 public:
  AutoRefMessage_WaitForBots_Violator();
  virtual ~AutoRefMessage_WaitForBots_Violator();

  AutoRefMessage_WaitForBots_Violator(const AutoRefMessage_WaitForBots_Violator& from);

  inline AutoRefMessage_WaitForBots_Violator& operator=(const AutoRefMessage_WaitForBots_Violator& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AutoRefMessage_WaitForBots_Violator& default_instance();

  void Swap(AutoRefMessage_WaitForBots_Violator* other);

  // implements Message ----------------------------------------------

  inline AutoRefMessage_WaitForBots_Violator* New() const { return New(NULL); }

  AutoRefMessage_WaitForBots_Violator* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AutoRefMessage_WaitForBots_Violator& from);
  void MergeFrom(const AutoRefMessage_WaitForBots_Violator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutoRefMessage_WaitForBots_Violator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .BotId bot_id = 1;
  bool has_bot_id() const;
  void clear_bot_id();
  static const int kBotIdFieldNumber = 1;
  const ::BotId& bot_id() const;
  ::BotId* mutable_bot_id();
  ::BotId* release_bot_id();
  void set_allocated_bot_id(::BotId* bot_id);

  // required float distance = 2;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 2;
  float distance() const;
  void set_distance(float value);

  // @@protoc_insertion_point(class_scope:AutoRefMessage.WaitForBots.Violator)
 private:
  inline void set_has_bot_id();
  inline void clear_has_bot_id();
  inline void set_has_distance();
  inline void clear_has_distance();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::BotId* bot_id_;
  float distance_;
  friend void  protobuf_AddDesc_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto();
  friend void protobuf_AssignDesc_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto();
  friend void protobuf_ShutdownFile_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto();

  void InitAsDefaultInstance();
  static AutoRefMessage_WaitForBots_Violator* default_instance_;
};
// -------------------------------------------------------------------

class AutoRefMessage_WaitForBots : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AutoRefMessage.WaitForBots) */ {
 public:
  AutoRefMessage_WaitForBots();
  virtual ~AutoRefMessage_WaitForBots();

  AutoRefMessage_WaitForBots(const AutoRefMessage_WaitForBots& from);

  inline AutoRefMessage_WaitForBots& operator=(const AutoRefMessage_WaitForBots& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AutoRefMessage_WaitForBots& default_instance();

  void Swap(AutoRefMessage_WaitForBots* other);

  // implements Message ----------------------------------------------

  inline AutoRefMessage_WaitForBots* New() const { return New(NULL); }

  AutoRefMessage_WaitForBots* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AutoRefMessage_WaitForBots& from);
  void MergeFrom(const AutoRefMessage_WaitForBots& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutoRefMessage_WaitForBots* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AutoRefMessage_WaitForBots_Violator Violator;

  // accessors -------------------------------------------------------

  // repeated .AutoRefMessage.WaitForBots.Violator violators = 1;
  int violators_size() const;
  void clear_violators();
  static const int kViolatorsFieldNumber = 1;
  const ::AutoRefMessage_WaitForBots_Violator& violators(int index) const;
  ::AutoRefMessage_WaitForBots_Violator* mutable_violators(int index);
  ::AutoRefMessage_WaitForBots_Violator* add_violators();
  ::google::protobuf::RepeatedPtrField< ::AutoRefMessage_WaitForBots_Violator >*
      mutable_violators();
  const ::google::protobuf::RepeatedPtrField< ::AutoRefMessage_WaitForBots_Violator >&
      violators() const;

  // @@protoc_insertion_point(class_scope:AutoRefMessage.WaitForBots)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AutoRefMessage_WaitForBots_Violator > violators_;
  friend void  protobuf_AddDesc_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto();
  friend void protobuf_AssignDesc_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto();
  friend void protobuf_ShutdownFile_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto();

  void InitAsDefaultInstance();
  static AutoRefMessage_WaitForBots* default_instance_;
};
// -------------------------------------------------------------------

class AutoRefMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AutoRefMessage) */ {
 public:
  AutoRefMessage();
  virtual ~AutoRefMessage();

  AutoRefMessage(const AutoRefMessage& from);

  inline AutoRefMessage& operator=(const AutoRefMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AutoRefMessage& default_instance();

  enum MessageCase {
    kCustom = 1,
    kWaitForBots = 2,
    MESSAGE_NOT_SET = 0,
  };

  void Swap(AutoRefMessage* other);

  // implements Message ----------------------------------------------

  inline AutoRefMessage* New() const { return New(NULL); }

  AutoRefMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AutoRefMessage& from);
  void MergeFrom(const AutoRefMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutoRefMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AutoRefMessage_WaitForBots WaitForBots;

  // accessors -------------------------------------------------------

  // optional string custom = 1;
  bool has_custom() const;
  void clear_custom();
  static const int kCustomFieldNumber = 1;
  const ::std::string& custom() const;
  void set_custom(const ::std::string& value);
  void set_custom(const char* value);
  void set_custom(const char* value, size_t size);
  ::std::string* mutable_custom();
  ::std::string* release_custom();
  void set_allocated_custom(::std::string* custom);

  // optional .AutoRefMessage.WaitForBots wait_for_bots = 2;
  bool has_wait_for_bots() const;
  void clear_wait_for_bots();
  static const int kWaitForBotsFieldNumber = 2;
  const ::AutoRefMessage_WaitForBots& wait_for_bots() const;
  ::AutoRefMessage_WaitForBots* mutable_wait_for_bots();
  ::AutoRefMessage_WaitForBots* release_wait_for_bots();
  void set_allocated_wait_for_bots(::AutoRefMessage_WaitForBots* wait_for_bots);

  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:AutoRefMessage)
 private:
  inline void set_has_custom();
  inline void set_has_wait_for_bots();

  inline bool has_message() const;
  void clear_message();
  inline void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union MessageUnion {
    MessageUnion() {}
    ::google::protobuf::internal::ArenaStringPtr custom_;
    ::AutoRefMessage_WaitForBots* wait_for_bots_;
  } message_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto();
  friend void protobuf_AssignDesc_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto();
  friend void protobuf_ShutdownFile_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto();

  void InitAsDefaultInstance();
  static AutoRefMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// AutoRefRegistration

// required string identifier = 1;
inline bool AutoRefRegistration::has_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutoRefRegistration::set_has_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AutoRefRegistration::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AutoRefRegistration::clear_identifier() {
  identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_identifier();
}
inline const ::std::string& AutoRefRegistration::identifier() const {
  // @@protoc_insertion_point(field_get:AutoRefRegistration.identifier)
  return identifier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutoRefRegistration::set_identifier(const ::std::string& value) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AutoRefRegistration.identifier)
}
inline void AutoRefRegistration::set_identifier(const char* value) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AutoRefRegistration.identifier)
}
inline void AutoRefRegistration::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AutoRefRegistration.identifier)
}
inline ::std::string* AutoRefRegistration::mutable_identifier() {
  set_has_identifier();
  // @@protoc_insertion_point(field_mutable:AutoRefRegistration.identifier)
  return identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutoRefRegistration::release_identifier() {
  // @@protoc_insertion_point(field_release:AutoRefRegistration.identifier)
  clear_has_identifier();
  return identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutoRefRegistration::set_allocated_identifier(::std::string* identifier) {
  if (identifier != NULL) {
    set_has_identifier();
  } else {
    clear_has_identifier();
  }
  identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identifier);
  // @@protoc_insertion_point(field_set_allocated:AutoRefRegistration.identifier)
}

// optional .Signature signature = 2;
inline bool AutoRefRegistration::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AutoRefRegistration::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AutoRefRegistration::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AutoRefRegistration::clear_signature() {
  if (signature_ != NULL) signature_->::Signature::Clear();
  clear_has_signature();
}
inline const ::Signature& AutoRefRegistration::signature() const {
  // @@protoc_insertion_point(field_get:AutoRefRegistration.signature)
  return signature_ != NULL ? *signature_ : *default_instance_->signature_;
}
inline ::Signature* AutoRefRegistration::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    signature_ = new ::Signature;
  }
  // @@protoc_insertion_point(field_mutable:AutoRefRegistration.signature)
  return signature_;
}
inline ::Signature* AutoRefRegistration::release_signature() {
  // @@protoc_insertion_point(field_release:AutoRefRegistration.signature)
  clear_has_signature();
  ::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline void AutoRefRegistration::set_allocated_signature(::Signature* signature) {
  delete signature_;
  signature_ = signature;
  if (signature) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  // @@protoc_insertion_point(field_set_allocated:AutoRefRegistration.signature)
}

// -------------------------------------------------------------------

// AutoRefToController

// optional .Signature signature = 1;
inline bool AutoRefToController::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutoRefToController::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AutoRefToController::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AutoRefToController::clear_signature() {
  if (signature_ != NULL) signature_->::Signature::Clear();
  clear_has_signature();
}
inline const ::Signature& AutoRefToController::signature() const {
  // @@protoc_insertion_point(field_get:AutoRefToController.signature)
  return signature_ != NULL ? *signature_ : *default_instance_->signature_;
}
inline ::Signature* AutoRefToController::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    signature_ = new ::Signature;
  }
  // @@protoc_insertion_point(field_mutable:AutoRefToController.signature)
  return signature_;
}
inline ::Signature* AutoRefToController::release_signature() {
  // @@protoc_insertion_point(field_release:AutoRefToController.signature)
  clear_has_signature();
  ::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline void AutoRefToController::set_allocated_signature(::Signature* signature) {
  delete signature_;
  signature_ = signature;
  if (signature) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  // @@protoc_insertion_point(field_set_allocated:AutoRefToController.signature)
}

// optional .GameEvent game_event = 2;
inline bool AutoRefToController::has_game_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AutoRefToController::set_has_game_event() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AutoRefToController::clear_has_game_event() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AutoRefToController::clear_game_event() {
  if (game_event_ != NULL) game_event_->::GameEvent::Clear();
  clear_has_game_event();
}
inline const ::GameEvent& AutoRefToController::game_event() const {
  // @@protoc_insertion_point(field_get:AutoRefToController.game_event)
  return game_event_ != NULL ? *game_event_ : *default_instance_->game_event_;
}
inline ::GameEvent* AutoRefToController::mutable_game_event() {
  set_has_game_event();
  if (game_event_ == NULL) {
    game_event_ = new ::GameEvent;
  }
  // @@protoc_insertion_point(field_mutable:AutoRefToController.game_event)
  return game_event_;
}
inline ::GameEvent* AutoRefToController::release_game_event() {
  // @@protoc_insertion_point(field_release:AutoRefToController.game_event)
  clear_has_game_event();
  ::GameEvent* temp = game_event_;
  game_event_ = NULL;
  return temp;
}
inline void AutoRefToController::set_allocated_game_event(::GameEvent* game_event) {
  delete game_event_;
  game_event_ = game_event;
  if (game_event) {
    set_has_game_event();
  } else {
    clear_has_game_event();
  }
  // @@protoc_insertion_point(field_set_allocated:AutoRefToController.game_event)
}

// optional .AutoRefMessage auto_ref_message = 3 [deprecated = true];
inline bool AutoRefToController::has_auto_ref_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AutoRefToController::set_has_auto_ref_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AutoRefToController::clear_has_auto_ref_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AutoRefToController::clear_auto_ref_message() {
  if (auto_ref_message_ != NULL) auto_ref_message_->::AutoRefMessage::Clear();
  clear_has_auto_ref_message();
}
inline const ::AutoRefMessage& AutoRefToController::auto_ref_message() const {
  // @@protoc_insertion_point(field_get:AutoRefToController.auto_ref_message)
  return auto_ref_message_ != NULL ? *auto_ref_message_ : *default_instance_->auto_ref_message_;
}
inline ::AutoRefMessage* AutoRefToController::mutable_auto_ref_message() {
  set_has_auto_ref_message();
  if (auto_ref_message_ == NULL) {
    auto_ref_message_ = new ::AutoRefMessage;
  }
  // @@protoc_insertion_point(field_mutable:AutoRefToController.auto_ref_message)
  return auto_ref_message_;
}
inline ::AutoRefMessage* AutoRefToController::release_auto_ref_message() {
  // @@protoc_insertion_point(field_release:AutoRefToController.auto_ref_message)
  clear_has_auto_ref_message();
  ::AutoRefMessage* temp = auto_ref_message_;
  auto_ref_message_ = NULL;
  return temp;
}
inline void AutoRefToController::set_allocated_auto_ref_message(::AutoRefMessage* auto_ref_message) {
  delete auto_ref_message_;
  auto_ref_message_ = auto_ref_message;
  if (auto_ref_message) {
    set_has_auto_ref_message();
  } else {
    clear_has_auto_ref_message();
  }
  // @@protoc_insertion_point(field_set_allocated:AutoRefToController.auto_ref_message)
}

// -------------------------------------------------------------------

// ControllerToAutoRef

// optional .ControllerReply controller_reply = 1;
inline bool ControllerToAutoRef::has_controller_reply() const {
  return msg_case() == kControllerReply;
}
inline void ControllerToAutoRef::set_has_controller_reply() {
  _oneof_case_[0] = kControllerReply;
}
inline void ControllerToAutoRef::clear_controller_reply() {
  if (has_controller_reply()) {
    delete msg_.controller_reply_;
    clear_has_msg();
  }
}
inline  const ::ControllerReply& ControllerToAutoRef::controller_reply() const {
  // @@protoc_insertion_point(field_get:ControllerToAutoRef.controller_reply)
  return has_controller_reply()
      ? *msg_.controller_reply_
      : ::ControllerReply::default_instance();
}
inline ::ControllerReply* ControllerToAutoRef::mutable_controller_reply() {
  if (!has_controller_reply()) {
    clear_msg();
    set_has_controller_reply();
    msg_.controller_reply_ = new ::ControllerReply;
  }
  // @@protoc_insertion_point(field_mutable:ControllerToAutoRef.controller_reply)
  return msg_.controller_reply_;
}
inline ::ControllerReply* ControllerToAutoRef::release_controller_reply() {
  // @@protoc_insertion_point(field_release:ControllerToAutoRef.controller_reply)
  if (has_controller_reply()) {
    clear_has_msg();
    ::ControllerReply* temp = msg_.controller_reply_;
    msg_.controller_reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ControllerToAutoRef::set_allocated_controller_reply(::ControllerReply* controller_reply) {
  clear_msg();
  if (controller_reply) {
    set_has_controller_reply();
    msg_.controller_reply_ = controller_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:ControllerToAutoRef.controller_reply)
}

inline bool ControllerToAutoRef::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void ControllerToAutoRef::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline ControllerToAutoRef::MsgCase ControllerToAutoRef::msg_case() const {
  return ControllerToAutoRef::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AutoRefMessage_WaitForBots_Violator

// required .BotId bot_id = 1;
inline bool AutoRefMessage_WaitForBots_Violator::has_bot_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutoRefMessage_WaitForBots_Violator::set_has_bot_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AutoRefMessage_WaitForBots_Violator::clear_has_bot_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AutoRefMessage_WaitForBots_Violator::clear_bot_id() {
  if (bot_id_ != NULL) bot_id_->::BotId::Clear();
  clear_has_bot_id();
}
inline const ::BotId& AutoRefMessage_WaitForBots_Violator::bot_id() const {
  // @@protoc_insertion_point(field_get:AutoRefMessage.WaitForBots.Violator.bot_id)
  return bot_id_ != NULL ? *bot_id_ : *default_instance_->bot_id_;
}
inline ::BotId* AutoRefMessage_WaitForBots_Violator::mutable_bot_id() {
  set_has_bot_id();
  if (bot_id_ == NULL) {
    bot_id_ = new ::BotId;
  }
  // @@protoc_insertion_point(field_mutable:AutoRefMessage.WaitForBots.Violator.bot_id)
  return bot_id_;
}
inline ::BotId* AutoRefMessage_WaitForBots_Violator::release_bot_id() {
  // @@protoc_insertion_point(field_release:AutoRefMessage.WaitForBots.Violator.bot_id)
  clear_has_bot_id();
  ::BotId* temp = bot_id_;
  bot_id_ = NULL;
  return temp;
}
inline void AutoRefMessage_WaitForBots_Violator::set_allocated_bot_id(::BotId* bot_id) {
  delete bot_id_;
  bot_id_ = bot_id;
  if (bot_id) {
    set_has_bot_id();
  } else {
    clear_has_bot_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AutoRefMessage.WaitForBots.Violator.bot_id)
}

// required float distance = 2;
inline bool AutoRefMessage_WaitForBots_Violator::has_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AutoRefMessage_WaitForBots_Violator::set_has_distance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AutoRefMessage_WaitForBots_Violator::clear_has_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AutoRefMessage_WaitForBots_Violator::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float AutoRefMessage_WaitForBots_Violator::distance() const {
  // @@protoc_insertion_point(field_get:AutoRefMessage.WaitForBots.Violator.distance)
  return distance_;
}
inline void AutoRefMessage_WaitForBots_Violator::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:AutoRefMessage.WaitForBots.Violator.distance)
}

// -------------------------------------------------------------------

// AutoRefMessage_WaitForBots

// repeated .AutoRefMessage.WaitForBots.Violator violators = 1;
inline int AutoRefMessage_WaitForBots::violators_size() const {
  return violators_.size();
}
inline void AutoRefMessage_WaitForBots::clear_violators() {
  violators_.Clear();
}
inline const ::AutoRefMessage_WaitForBots_Violator& AutoRefMessage_WaitForBots::violators(int index) const {
  // @@protoc_insertion_point(field_get:AutoRefMessage.WaitForBots.violators)
  return violators_.Get(index);
}
inline ::AutoRefMessage_WaitForBots_Violator* AutoRefMessage_WaitForBots::mutable_violators(int index) {
  // @@protoc_insertion_point(field_mutable:AutoRefMessage.WaitForBots.violators)
  return violators_.Mutable(index);
}
inline ::AutoRefMessage_WaitForBots_Violator* AutoRefMessage_WaitForBots::add_violators() {
  // @@protoc_insertion_point(field_add:AutoRefMessage.WaitForBots.violators)
  return violators_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AutoRefMessage_WaitForBots_Violator >*
AutoRefMessage_WaitForBots::mutable_violators() {
  // @@protoc_insertion_point(field_mutable_list:AutoRefMessage.WaitForBots.violators)
  return &violators_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AutoRefMessage_WaitForBots_Violator >&
AutoRefMessage_WaitForBots::violators() const {
  // @@protoc_insertion_point(field_list:AutoRefMessage.WaitForBots.violators)
  return violators_;
}

// -------------------------------------------------------------------

// AutoRefMessage

// optional string custom = 1;
inline bool AutoRefMessage::has_custom() const {
  return message_case() == kCustom;
}
inline void AutoRefMessage::set_has_custom() {
  _oneof_case_[0] = kCustom;
}
inline void AutoRefMessage::clear_custom() {
  if (has_custom()) {
    message_.custom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_message();
  }
}
inline const ::std::string& AutoRefMessage::custom() const {
  // @@protoc_insertion_point(field_get:AutoRefMessage.custom)
  if (has_custom()) {
    return message_.custom_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void AutoRefMessage::set_custom(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AutoRefMessage.custom)
  if (!has_custom()) {
    clear_message();
    set_has_custom();
    message_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AutoRefMessage.custom)
}
inline void AutoRefMessage::set_custom(const char* value) {
  if (!has_custom()) {
    clear_message();
    set_has_custom();
    message_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AutoRefMessage.custom)
}
inline void AutoRefMessage::set_custom(const char* value, size_t size) {
  if (!has_custom()) {
    clear_message();
    set_has_custom();
    message_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AutoRefMessage.custom)
}
inline ::std::string* AutoRefMessage::mutable_custom() {
  if (!has_custom()) {
    clear_message();
    set_has_custom();
    message_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:AutoRefMessage.custom)
  return message_.custom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutoRefMessage::release_custom() {
  // @@protoc_insertion_point(field_release:AutoRefMessage.custom)
  if (has_custom()) {
    clear_has_message();
    return message_.custom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void AutoRefMessage::set_allocated_custom(::std::string* custom) {
  if (!has_custom()) {
    message_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_message();
  if (custom != NULL) {
    set_has_custom();
    message_.custom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        custom);
  }
  // @@protoc_insertion_point(field_set_allocated:AutoRefMessage.custom)
}

// optional .AutoRefMessage.WaitForBots wait_for_bots = 2;
inline bool AutoRefMessage::has_wait_for_bots() const {
  return message_case() == kWaitForBots;
}
inline void AutoRefMessage::set_has_wait_for_bots() {
  _oneof_case_[0] = kWaitForBots;
}
inline void AutoRefMessage::clear_wait_for_bots() {
  if (has_wait_for_bots()) {
    delete message_.wait_for_bots_;
    clear_has_message();
  }
}
inline  const ::AutoRefMessage_WaitForBots& AutoRefMessage::wait_for_bots() const {
  // @@protoc_insertion_point(field_get:AutoRefMessage.wait_for_bots)
  return has_wait_for_bots()
      ? *message_.wait_for_bots_
      : ::AutoRefMessage_WaitForBots::default_instance();
}
inline ::AutoRefMessage_WaitForBots* AutoRefMessage::mutable_wait_for_bots() {
  if (!has_wait_for_bots()) {
    clear_message();
    set_has_wait_for_bots();
    message_.wait_for_bots_ = new ::AutoRefMessage_WaitForBots;
  }
  // @@protoc_insertion_point(field_mutable:AutoRefMessage.wait_for_bots)
  return message_.wait_for_bots_;
}
inline ::AutoRefMessage_WaitForBots* AutoRefMessage::release_wait_for_bots() {
  // @@protoc_insertion_point(field_release:AutoRefMessage.wait_for_bots)
  if (has_wait_for_bots()) {
    clear_has_message();
    ::AutoRefMessage_WaitForBots* temp = message_.wait_for_bots_;
    message_.wait_for_bots_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AutoRefMessage::set_allocated_wait_for_bots(::AutoRefMessage_WaitForBots* wait_for_bots) {
  clear_message();
  if (wait_for_bots) {
    set_has_wait_for_bots();
    message_.wait_for_bots_ = wait_for_bots;
  }
  // @@protoc_insertion_point(field_set_allocated:AutoRefMessage.wait_for_bots)
}

inline bool AutoRefMessage::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void AutoRefMessage::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline AutoRefMessage::MessageCase AutoRefMessage::message_case() const {
  return AutoRefMessage::MessageCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto__INCLUDED
